[{"answer_id":273830,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/273830#273830","body":"<h1><a href=\"https://www.gnu.org/software/gawk/\" rel=\"nofollow noreferrer\">AWK</a>, 31 + 2 = 33 bytes</h1>\n<p>May this be a cheat, but the delimiter of input must be hard coded to the argument of <code>-F</code>. E.g. <code>-F,</code>, <code>-F;</code>, <code>-F </code>.</p>\n<pre><code>i=NF{for(;i;)print NR,i,$(i--)}\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=m704sTx7ebSSrpuOUuyCpaUlaboW-zNt_dyq0_KLNKwzrTULijLzShT8gnQydVQ0MnV1NWshqqCKF9zU9UgtStXJLNYpzs9N1SlOzC3ISeVKSSxJ1ElJzcnMzSxJTdFJqtRJzs_NTSzmgugCAA\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n<p><a href=\"https://ato.pxeger.com/run?1=m704sTx7ebSSrpu1UuyCpaUlaboW-zNt_dyq0_KLNKwzrTULijLzShT8gnQydVQ0MnV1NWshqqCKF2zxSM3JybdW4lKyLs8vykkB0kpcEDkA\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n<p><a href=\"https://ato.pxeger.com/run?1=m704sTx7ebSSrpuCUuyCpaUlaboW-zNt_dyq0_KLNKwzrTULijLzShT8gnQydVQ0MnV1NWshqqCKF9xULMlXSEpVyC9SyMsv4SrJSCxRyCxWKMlIVSgsTS0uyczPg6gEAA\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n<h2>Usage</h2>\n<p>Delimiter is given to the <code>-F</code> option. Your DSV is given from standard input. One line per record. If you want to contain a value with newlines, you need to simulate it with a string of <code>\\n</code>. For example if you want to input this kind of CSV:</p>\n<pre><code>Haha,&quot;newline\n&gt;=)&quot;\n</code></pre>\n<p>You must convert it to:</p>\n<pre><code>Haha,newline\\n&gt;=)\n</code></pre>\n<h2>Output format</h2>\n<p>It consists of three space-separated lines.</p>\n<ol>\n<li>Row number (1-indexed)</li>\n<li>Column number (1-indexed)</li>\n<li>Value</li>\n</ol>\n<p>Each column is shown in reverse order but I think this can be justified because I clarified row and column indices. Example:</p>\n<pre><code>1 4 sample\n1 3 some\n1 2 is\n1 1 Here\n2 4 commas\n2 3 by\n2 2 delimited\n2 1 data\n</code></pre>\n<h2>Explained</h2>\n<pre><code>             # For each line,\n# -F?        # split line by a delimiter to store to $1, $2, ..., $NF as strings\ni=NF{        # assign number of columns\n  for(;i;)   # while i is not zero\n    print NR,i,$(i--)  # print line number, i, value of $i with space delimited. Then decrement i.\n}\n</code></pre>\n"},{"answer_id":255538,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/255538#255538","body":"\n<h1><a href=\"https://go.dev\" rel=\"nofollow noreferrer\">Go</a>, 136 bytes</h1>\n<pre class=\"lang-go prettyprint-override\"><code>import.&quot;strings&quot;\nfunc f(S[]string,d rune)(O[][]string){for _,s:=range S{O=append(O,FieldsFunc(s,func(r rune)bool{return r==d}))}\nreturn}\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=bZFPTgMhFMbjllO8YJrOJNi1sRk3TbozNemybSwFpiUOMAKjaQh77-CmMfEQHkVPI1OclW7g8eV9v_eHt_e9OX22lD3SvQBFpUZStcb6Ca6Vxx-dr6-uv14HzXkr9d5hVHeaQV0sV5ssEQ6206IsFqvNoJWhNhYeiLupLNUJvwyLirat0LxYkLkUDXfzxCkc6XGFzYidMU2wwndWg60qHssyovyOuZ_vizt_bAXMqBOQanXMQ0BLGAqj2ZmEIsp99mMVZUAs5Tu4qVJibw3ofA6ugA_CCpCOOKMEcVS1jcAEc-op4aKRSnrBye4IzChFHY5kTMaR_KU0jZmucbKu8fTF2IbnMEmRwHj6j8cb2AlI29LGp2R_oD41Av4g4KkTzkujz17ovRHlvbJ-lLzZPFlA9wnn6wKPLp9hO2JbqG4hxWuNCbDJsj9mJP3bEJdlov1u9XTK9w8\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n"},{"answer_id":111724,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111724#111724","body":"<h1>MATL, <s>14</s> <s>12</s> 4 bytes</h1>\n<pre><code>H&amp;XX\n</code></pre>\n<p>Try it at <a href=\"https://matl.io/?code=H%26XX%0A%0AZD&amp;inputs=%7B%27here+is%2Csome%2Csample%27%2C%27data%2Cdelimited%2Cby+commas%27%7D%0A%27%2C%27&amp;version=19.8.0\" rel=\"nofollow noreferrer\"><strong>MATL Online</strong></a> (the link has a modification at the end to show the dimensionality of the output cell array).</p>\n<p><strong>Explanation</strong></p>\n<pre><code>        % Implicitly grab the first input as a cell array of strings\n        % Implicitly grab the delimiter as a string\nH       % Push the number literal 2 to the stack\n&amp;XX     % Split the input at each appearance of the delimiter\n        % Implicitly display the result\n</code></pre>\n"},{"answer_id":120833,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/120833#120833","body":"<h1>R, 8 bytes (2 ways)</h1>\n<p>R has two builtin functions that meet the requirements of this challenge:</p>\n<pre><code>strsplit\n</code></pre>\n<p>takes a vector of strings and a separator, and returns a list of vectors of the separated strings.</p>\n<pre><code>read.csv\n</code></pre>\n<p>takes a file name and a separator, and returns a data frame. Technically this might be 10 bytes because it needs the option <code>header=F</code> so it won't read the first elements as the column names. Currently the TIO link reads from stdin.</p>\n<p><a href=\"https://tio.run/nexus/r#bY0xCsMwEAR7v@K4SgKRD6jPK9w41oEEQhfrNsnzFeE0LtIty87OMHR71gK3O4bSQ0g7NQUHRt5AxQhZ6HiJoWhjH5jYL1csS60aV57IyvGjvaZfnNWcxznvsqXbbm9nSKU5H@7nzbgal3@@8QU\" rel=\"nofollow noreferrer\">Try these online!</a></p>\n"},{"answer_id":120792,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/120792#120792","body":"<h1><a href=\"https://www.dyalog.com/\" rel=\"nofollow noreferrer\">APL (Dyalog)</a>, 4 bytes</h1>\n\n\n\n<p>In versions up to and including 15.0, this needs <code>⎕ML←3</code> which is default by many. From version 16.0 <code>⊂</code> can just be replaced by <code>⊆</code> for the same effect.</p>\n\n<p>Takes separator as left argument and DSV as right argument.</p>\n\n<pre class=\"lang-apl prettyprint-override\"><code>≠⊂¨⊢\n</code></pre>\n\n<p><a href=\"https://tio.run/nexus/apl-dyalog#e9Q31dfnUdsE4/9pQPJR54JHXU2HVjzqWvTfrSg/1yvY3w8obG5oavmoZxtXSD5cwMwAKPAfIqCgrqOukKYA06CgHq2UkVqUqpBZrFOcn5uqU5yYW5CTqqSjlJJYkqiTkpqTmZtZkpqik1SpkJyfm5tYrBSrzgUzyhrTqJycfOsYJaD@GCXr8vyinBQIEyiEpE8BXV9JvkJSqkJ@kUJefglQQ0lGYgnQRQolGakKhaWpxSWZ@XlA/QA\" rel=\"nofollow noreferrer\" title=\"APL (Dyalog Unicode) – TIO Nexus\">Try it online!</a></p>\n\n<p><code>≠</code> the inequalities (of the left argument and the right argument)</p>\n\n<p><code>⊂¨</code> partition each</p>\n\n<p><code>⊢</code> right argument</p>\n\n<p>By partition is mean to remove all elements indicated by a corresponding zero in the left argument, and begin a new partition whenever a the corresponding number in the left argument is greater than its predecessor, i.e. on every one if the left argument is Boolean, as is the case here.</p>\n"},{"answer_id":111753,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111753#111753","body":"<h1>Cheddar, 19 bytes</h1>\n\n<pre><code>a-&gt;b-&gt;a=&gt;@.split(b)\n</code></pre>\n\n<p>nice demonstration of looping abilities. I added new composition and f.op. blocks so that allows for interesting golfing. <code>(=&gt;:@.split)</code> is supposed to work but it doesn't :(</p>\n"},{"answer_id":114332,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/114332#114332","body":"<h2>REXX, 95 bytes</h2>\n\n<pre><code>arg f d\ndo l=1 while lines(f)\n    n=linein(f)\n    do #=1 while n&gt;''\n        parse var n w (d) n\n        o.l.#=w\n    end\nend\n</code></pre>\n\n<p>Takes a filename and a delimiter as arguments, contents of file are put in stem <code>o</code>.</p>\n"},{"answer_id":112013,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/112013#112013","body":"<h2><a href=\"https://www.gnu.org/software/sed/\" rel=\"nofollow noreferrer\">GNU sed</a>, 48 + 1(r flag) = 49 bytes</h2>\n\n<pre class=\"lang-sed prettyprint-override\"><code>1h;1d\n:\nG\n/,$/bp\ns:(.)(.*)\\n\\1:,\\2:\nt\n:p;s:..$::\n</code></pre>\n\n<p><strong><a href=\"https://tio.run/nexus/bash#DcVBCoAgEADA@75CRFDDVuy4@4A@4SkUPEiKBj3fmsvMnMQ@hF6hcEhAcIJ3yl8dJhm0Bjcb7xjIxYPgAeo8CVERLb0YSq61sQTJbxs1/csP\" rel=\"nofollow noreferrer\">Try it online!</a></strong></p>\n\n<p>In sed there are no data types, but a natural representation of a list would be a collection of lines. As such, the input format consists of DSV records each on a separate line, with the delimiter present on the first line.</p>\n\n<p><strong>Explanation:</strong> by design, sed runs the script as many times as there are input lines</p>\n\n<pre class=\"lang-sed prettyprint-override\"><code>1h;1d                  # store delimiter, start new cycle\n:                      # begin loop\nG                      # append saved delimiter\n/,$/bp                 # if delimiter is ',', skip replacements and go to printing\ns:(.)(.*)\\n\\1:,\\2:     # replace first occurrence of delimiter with ','\nt                      # repeat\n:p;s:..$::             # print label: delete appended delimiter (implicit printing)\n</code></pre>\n"},{"answer_id":111712,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111712#111712","body":"<h1>Powershell, <s>25</s> 22/23 bytes</h1>\n<p>Two Options, one just calls split on the first arg, using the second arg as a delim value.</p>\n<pre><code>$args[0]-split$args[1]\n</code></pre>\n<p>One byte longer, builtin to parse csvs, takes filename as first arg and delim as second.</p>\n<pre><code>ipcsv $args[0] $args[1]\n</code></pre>\n<p>-2 because it doesn't require the <code>-Delimiter</code> (<code>-D</code>) param, and will assume it by default.</p>\n<p>sadly powershell cannot pass an array of two params, as it will assume they are both files, and will run the command against it twice, no other two-var input method is shorter than this as far as I can see, so this is likely the shortest possible answer.</p>\n<p><code>ipcsv</code> is an alias for <code>Import-Csv</code>, takes a file name as the first unnamed input, and the delim character as the second by default behavior.</p>\n<p>Run against the <a href=\"https://en.wikipedia.org/wiki/Delimiter-separated_values#Delimited_formats\" rel=\"nofollow noreferrer\">example</a> from the wiki page returns</p>\n<pre><code>PS C:\\Users\\Connor\\Desktop&gt; .\\csvparse.ps1 'example.csv' ','\n\nDate     Pupil               Grade\n----     -----               -----\n25 May   Bloggs, Fred        C\n25 May   Doe, Jane           B\n15 July  Bloggs, Fred        A\n15 April Muniz, Alvin &quot;Hank&quot; A\n</code></pre>\n"},{"answer_id":111831,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111831#111831","body":"<h1>Rebol, 33 bytes</h1>\n<pre><code>func[b s][map-each n b[split n s]\n</code></pre>\n"},{"answer_id":111787,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111787#111787","body":"<h2>Ruby using '-n', 17+1 = 18 bytes</h2>\n<pre><code>p chomp.split *$*\n</code></pre>\n<h3>How it works</h3>\n<ul>\n<li>Input from file</li>\n<li>separator is given as command line parameter</li>\n<li>since we only have 1 parameter, <code>*$*</code> splats the string and we can use it as a parameter for the <code>split</code> function</li>\n<li>I tried to avoid <code>chomp</code> but any other solution seems to be longer than this.</li>\n</ul>\n"},{"answer_id":111781,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111781#111781","body":"<h1>CJam, 5 bytes</h1>\n<pre><code>l~l./\n</code></pre>\n<p>Explanation:</p>\n<pre><code>l~     e#Input evaluated (as list)\n  l    e#Another line of input\n   ./  e#Split first input by second\n</code></pre>\n"},{"answer_id":111709,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111709#111709","body":"<h1><a href=\"https://github.com/DennisMitchell/jelly\" rel=\"nofollow noreferrer\">Jelly</a>, <s>3</s> 2 <a href=\"https://github.com/DennisMitchell/jelly/wiki/Code-page\" rel=\"nofollow noreferrer\">bytes</a></h1>\n<p><em>Dennis <a href=\"http://chat.stackexchange.com/transcript/message/35753610#35753610\">points out</a> that while the 2 byte solution appears to not work, the dyadic link itself does, and that it is actually the way command line arguments are parsed that make it look that way.</em></p>\n<pre><code>ṣ€\n</code></pre>\n<p><strong><a href=\"https://tio.run/nexus/jelly#@/9w5@JHTWv@P2qYk5FalKqQWaxTnJ@bqlOcmFuQkwoUTUksSdRJSc3JzM0sSU3RSapUSM7PzU0sftQw9/ByIKHj/v9rXr5ucmJyRioA\" rel=\"nofollow noreferrer\">Try It Online!</a></strong> - footer calls the function with left and right set explicitly, and formats as a grid*.</p>\n<p>Exactly as the below, except <code>ṣ</code> splits at occurrences of the right argument rather than at sublists equal to the right argument.</p>\n<hr />\n<pre><code>œṣ€\n</code></pre>\n<p>The <strong><a href=\"https://tio.run/nexus/jelly#AU4Asf//xZPhuaPigqz/w6dH//9bImhlcmUgaXMsc29tZSxzYW1wbGUiLCJkYXRhLGRlbGltaXRlZCxieSBjb21tYXMiXf8nLCf1bm8tY2FjaGU\" rel=\"nofollow noreferrer\" title=\"Jelly – TIO Nexus\">3 byter</a></strong> - footer displays the result as a grid*.</p>\n<p>A dyadic link (function) that takes the DSV list on the left and the delimiter on the right.</p>\n<h3>How?</h3>\n<pre><code>œṣ€ - Main link: list l, delimiter d\n  € - for each item in l:\nœṣ  -     split at occurrences of sublists equal to d\n</code></pre>\n<p>* As a full program the implicit output would simply &quot;smush&quot; together all the characters, so the footer of the TIO link calls the link as a dyad and uses <code>G</code> to format the result nicely.</p>\n"},{"answer_id":111722,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111722#111722","body":"<h1>MATLAB / Octave, <s>41</s> 25 bytes</h1>\n<pre><code>@(x,d)regexp(x,d,'split')\n</code></pre>\n<p>Creates an anonymous function named <code>ans</code> which accepts the first input as a cell array of strings and the second input as a string.</p>\n<pre><code>ans({'Hello World', 'How are you'}, ' ')\n</code></pre>\n<p><a href=\"https://tio.run/#FudVb\" rel=\"nofollow noreferrer\"><strong>Try it Online</strong></a></p>\n"},{"answer_id":111721,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111721#111721","body":"<h1>Mathematica, 11 bytes</h1>\n\n<pre><code>StringSplit\n</code></pre>\n\n<p>Builtin function taking two arguments, a list of strings and a character (and even more general than that). Example usage:</p>\n\n<pre><code>StringSplit[{\"to be or not\", \"that is the question\"}, \" \"]\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>{{\"to\", \"be\", \"or\", \"not\"}, {\"that\", \"is\", \"the\", \"question\"}}\n</code></pre>\n"},{"answer_id":111717,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111717#111717","body":"<h1><a href=\"https://github.com/ETHproductions/japt\" rel=\"noreferrer\">Japt</a>, 3 bytes</h1>\n\n<pre><code>mqV\n</code></pre>\n\n<p><a href=\"http://ethproductions.github.io/japt/?v=1.4.4&amp;code=bXFW&amp;input=WyJoZXJlIGlzLHNvbWUsc2FtcGxlIiwiZGF0YSxkZWxpbWl0ZWQsYnkgY29tbWFzIl0gIiwiIC1R\" rel=\"noreferrer\">Test it online!</a> (Uses the <code>-Q</code> flag to prettyprint the output)</p>\n\n<pre><code>mqV  // Implicit: U, V = inputs\nm    // Map each item in U by the following function:\n qV  //   Split the item at instances of V.\n     // Implicit: output result of last expression\n</code></pre>\n"},{"answer_id":111713,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111713#111713","body":"<h2>JavaScript, 26 bytes</h2>\n\n<pre><code>x=&gt;y=&gt;x.map(n=&gt;n.split(y))\n</code></pre>\n\n<p>Receives input in format (array of strings)(delimiter) </p>\n\n<p><a href=\"https://tio.run/nexus/javascript-node#S7P9X2FrV2lrV6GXm1igkWdrl6dXXJCTWaJRqan5Pzk/rzg/J1UvJz9dI00jWikjU0dJRylDJ1UnRycnXylWUwPIBaoDAA\" rel=\"nofollow noreferrer\" title=\"JavaScript (Node.js) – TIO Nexus\">Try it online!</a></p>\n"},{"answer_id":111711,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111711#111711","body":"<h1>Python, 33 bytes</h1>\n<pre><code>lambda a,c:[x.split(c)for x in a]\n</code></pre>\n"},{"answer_id":111710,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111710#111710","body":"<h2>Haskell, 29 bytes</h2>\n\n<pre><code>import Data.Lists\nmap.splitOn\n</code></pre>\n\n<p>Usage example: <code>(map.splitOn) \" \" [\"to be or not\",\"that is the question\"]</code> -> <code>[[\"to\",\"be\",\"or\",\"not\"],[\"that\",\"is\",\"the\",\"question\"]]</code>.</p>\n"},{"answer_id":111708,"question_id":111707,"link":"https://codegolf.stackexchange.com/questions/111707/simple-csv-dsv-importer/111708#111708","body":"<h1><a href=\"https://github.com/Adriandmen/05AB1E\" rel=\"nofollow noreferrer\">05AB1E</a>, 5 bytes</h1>\n\n<pre><code>vy²¡ˆ\n</code></pre>\n\n<p><a href=\"https://tio.run/nexus/05ab1e#@19WeWjToYWn2/7/j1ZP1EnSSVbXUVBP1knRSVWP5dIBAA\" rel=\"nofollow noreferrer\" title=\"05AB1E – TIO Nexus\">Try it online!</a></p>\n\n<p>Explanation:</p>\n\n<pre><code>v     For each element in the input array\n y    Push the element\n  ²   Push second input\n   ¡  Split\n    ˆ Add to array\n</code></pre>\n"}]