[{"answer_id":256301,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/256301#256301","body":"<h1><a href=\"https://github.com/ETHproductions/japt\" rel=\"nofollow noreferrer\">Japt</a>, 11 <a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\" rel=\"nofollow noreferrer\">bytes</a></h1>\n<p>0-indexed</p>\n<pre><code>gUòò@T±1ÃcÔ\n</code></pre>\n<p><a href=\"https://petershaggynoble.github.io/Japt-Interpreter/?v=1.4.6&amp;code=Z1Xy8kBUsTHDY9Q&amp;input=MTE\" rel=\"nofollow noreferrer\">Try it</a></p>\n<pre><code>gUòò@T±1ÃcÔ     :Implicit input of integer U\ng               :Index into\n Uò             :  Range [0,U]\n   ò            :  Range [0,each]\n    @           :  Map each subrange\n     T±1        :    Increment T (initially 0) by 1\n        Ã       :  End map\n         c      :  Flat map\n          Ô     :    Reverse\n</code></pre>\n"},{"answer_id":256297,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/256297#256297","body":"<h1><a href=\"http://jsoftware.com/\" rel=\"nofollow noreferrer\">J</a>, 19 bytes</h1>\n<pre><code>1-]-0.5*:@&lt;.@+%:@+:\n</code></pre>\n<p><a href=\"https://tio.run/##y/qvpKeepmBrpaCuo2CgYAXEunoKzkE@bv8NdWN1DfRMtawcbPQctFWtHLSt/mtypSZn5CukKRjCGEYwhjGMYQJXA2dZWhogmHCthgYGBgi2sSkS2wzONjI2Mf0PAA\" rel=\"nofollow noreferrer\" title=\"J – Try It Online\">Try it online!</a> Uses the formula from <a href=\"https://codegolf.stackexchange.com/a/117883/31957\">Arnauld's answer</a>.</p>\n<pre><code>1-]-0.5*:@&lt;.@+%:@+:\n                 +:    2n\n              %:@      sqrt(^)\n    0.5      +         0.5 + ^\n          &lt;.@          floor(^)\n       *:@             square(^)\n  ]-                   input - ^\n1-                     1 - ^\n                       (computes - input + 1 in a golfier way)\n</code></pre>\n<h1><a href=\"http://jsoftware.com/\" rel=\"nofollow noreferrer\">J</a>, 43 bytes</h1>\n<pre><code>1+;@((#{.[:;(1&lt;@,#&amp;0)&quot;0)&lt;@|.;.1&gt;:)@i.@+:i.]\n</code></pre>\n<p><a href=\"https://tio.run/##y/qvpKeepmBrpaCuo2CgYAXEunoKzkE@bv8Nta0dNDSUq/Wiraw1DG0cdJTVDDSVDDRtHGr0rPUM7aw0HTL1HLStMvVi/2typSZn5CukKRjCGEYwhjGMYQJXA2dZWhogmHCthgYGBgi2sSkS2wzONjI2Mf0PAA\" rel=\"nofollow noreferrer\" title=\"J – Try It Online\">Try it online!</a></p>\n<p>Shortest non-formula solution I could think of. The array form of <code>;.</code> is really unwieldly for code golf, and it doesn't help that ragged lists aren't that golfy either.</p>\n<pre><code>1+;@((#{.[:;(1&lt;@,#&amp;0)&quot;0)&lt;@|.;.1&gt;:)@i.@+:i.]\n                                  @i.@+:      range [0, 2n)\n    (                       ;.1&gt;:)            segment [1, 2n] according to\n     (                 )                      the indices of triangular numbers:\n            (       )&quot;0                         over each integer in [0, 2n):\n                 #&amp;0                            create that many 0s\n             1  ,                               prepend a 1 (a cut location)\n              &lt;@                                and box it\n         [:;                                    then raze that boxed list\n      #{.                                       and take 2n entries from that array\n                        &lt;@|.                  box and reverse each segment\n  ;@                                          raze this list\n                                        i.]   get the 0-based index of the input in it\n1+                                            and add 1\n</code></pre>\n<p>For generating the indices of triangular number, the invariance under inverse transform <code>(=(-:@*&gt;:)@&lt;.@%:@+:)</code> is 1 byte longer, but much faster.</p>\n"},{"answer_id":256259,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/256259#256259","body":"<h1><a href=\"http://julialang.org/\" rel=\"nofollow noreferrer\">Julia 1.0</a>, <s>29</s> 23 bytes</h1>\n\n<pre class=\"lang-julia prettyprint-override\"><code>!n=round((2n)^.5)^2-n+1\n</code></pre>\n<p><a href=\"https://tio.run/##yyrNyUw0rPj/XzHPtii/NC9FQ8MoTzNOz1Qzzkg3T9vwf0FRZl5JTp6GooahpiYXEs8ElWtkbGKqqfkfAA\" rel=\"nofollow noreferrer\" title=\"Julia 1.0 – Try It Online\">Try it online!</a></p>\n<p>Port of <a href=\"https://codegolf.stackexchange.com/a/117883/109916\">Arnauld's JS</a> answer.</p>\n<p>-6 thx to @steffan</p>\n"},{"answer_id":256258,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/256258#256258","body":"<h1><a href=\"https://docs.python.org/3/\" rel=\"nofollow noreferrer\">Python 3</a>, <s>37</s> <s>35</s> 32 bytes</h1>\n\n<pre class=\"lang-python prettyprint-override\"><code>lambda n:round((2*n)**.5)**2-n+1\n</code></pre>\n<p><a href=\"https://tio.run/##K6gsycjPM/6fZhvzPycxNyklUSHPqii/NC9FQ8NIK09TS0vPFEgY6eZpG/4vKMrMK9FI0zDU1OSCs02QOUbGJqaamv8B\" rel=\"nofollow noreferrer\" title=\"Python 3 – Try It Online\">Try it online!</a></p>\n<p>Port of <a href=\"https://codegolf.stackexchange.com/a/117883/109916\">Arnauld's JS</a> answer.</p>\n<p>-3 thx to @Steffan</p>\n"},{"answer_id":256260,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/256260#256260","body":"<h1><a href=\"https://github.com/Vyxal/Vyxal\" rel=\"nofollow noreferrer\">Vyxal</a>, 8 bytes</h1>\n<pre><code>dɾ:ẇRfJi\n</code></pre>\n<p><a href=\"https://vyxal.pythonanywhere.com/#WyIiLCIiLCJkyb464bqHUmZKaSIsIiIsIjQwMCJd\" rel=\"nofollow noreferrer\">Try it Online!</a></p>\n"},{"answer_id":151759,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/151759#151759","body":"<h1><a href=\"https://github.com/mudkip201/pyt\" rel=\"nofollow noreferrer\">Pyt</a>, <s>13</s> 12 bytes</h1>\n\n<pre><code>←Đ2*√½+⌊²-~⁺\n</code></pre>\n\n<p>Port of <a href=\"https://codegolf.stackexchange.com/a/117883/15214\">Arnauld's approach</a></p>\n"},{"answer_id":151764,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/151764#151764","body":"<h1><a href=\"https://www.haskell.org/\" rel=\"nofollow noreferrer\">Haskell</a>, 31 bytes</h1>\n\n\n\n<pre class=\"lang-hs prettyprint-override\"><code>r=round\nf n=r(sqrt$2*n)^2-r n+1\n</code></pre>\n\n<p><a href=\"https://tio.run/##y0gszk7Nyfn/v8i2KL80L4UrTSHPtkijuLCoRMVIK08zzki3SCFP2/B/bmJmnm1BUWZeiUqagvF/AA\" rel=\"nofollow noreferrer\" title=\"Haskell – Try It Online\">Try it online!</a></p>\n\n<p>This answer just uses the formula.  It is the least interesting answer here, but it also happens to be the golfiest.</p>\n\n<h1><a href=\"https://www.haskell.org/\" rel=\"nofollow noreferrer\">Haskell</a>, <s>38</s> <s>36</s> 34 bytes</h1>\n\n\n\n<pre class=\"lang-hs prettyprint-override\"><code>x!y|x&lt;=y=1-x|v&lt;-y+1=v+(x-y)!v\n(!0)\n</code></pre>\n\n<p><a href=\"https://tio.run/##y0gszk7Nyfn/v0KxsqbCxrbS1lC3oqbMRrdS29C2TFujQrdSU7GMK9FWQ9FA839uYmaebUFRZl6JSm5igUJitKGenqGBQex/AA\" rel=\"nofollow noreferrer\" title=\"Haskell – Try It Online\">Try it online!</a></p>\n\n<p><code>(!0)</code> is the point free function we are concerned with.</p>\n\n<h2>Explanation</h2>\n\n<p>Let me start out by saying I'm very happy with this answer.</p>\n\n<p>The basic idea here is that if we remove the largest triangular number smaller than our input we can reverse it and add the triangular number back.  So we define an operator <code>!</code>, <code>!</code> takes our regular input, <code>x</code>, but it also takes an extra number <code>y</code>.  <code>y</code> keeps track of the size of the growing triangular number.  If <code>x&gt;y</code> we want to recurse, we decrease <code>x</code> by <code>y</code> and increase <code>y</code> by one.  So we calculate <code>(x-y)!(y+1)</code> and add <code>y+1</code> to it.  If <code>x&lt;=y</code> we have reached our base case, to reverse <code>x</code>'s placement in the row of the triangle we return <code>1-x</code>.</p>\n\n<h1><a href=\"https://www.haskell.org/\" rel=\"nofollow noreferrer\">Haskell</a>, 54 bytes</h1>\n\n\n\n<pre class=\"lang-hs prettyprint-override\"><code>f x|u&lt;-div(x^2-x)2=[u+x,u+x-1..u+1]\n(!!)$0:(&gt;&gt;=)[1..]f\n</code></pre>\n\n<p><a href=\"https://tio.run/##y0gszk7Nyfn/P02hoqbURjcls0yjIs5It0LTyDa6VLtCB4h1DfX0SrUNY7kSbTUUFTVVDKw07OxsNaOBwrFp/3MTM/NsC4oy80pUchMLFBJBwoYGBrH/AQ\" rel=\"nofollow noreferrer\" title=\"Haskell – Try It Online\">Try it online!</a></p>\n\n<p><code>(!!)$0:(&gt;&gt;=)[1..]f</code> is a point-free function</p>\n\n<h2>Explanation</h2>\n\n<p>The first thing we are concerned with is <code>f</code>, <code>f</code> is a function that takes <code>x</code> and returns the <code>x</code>th row of th triangle in reverse.  It does this by first calculating the <code>x-1</code>nd triangular number and assigning it to <code>u</code>. <code>u&lt;-div(x^2-x)2</code>.  We then return the list <code>[u+x,u+x-1..u+1]</code>. <code>u+x</code> is the <code>x</code>th triangular number and the first number on the row, <code>u+x-1</code> is one less than that and the second number on the row <code>u+1</code> is one more than the last triangular number and thus the last number on the row.</p>\n\n<p>Once we have <code>f</code> we form a list <code>(&gt;&gt;=)[1..]f</code>, which is a flattening of the triangle.  We add zero to the front with <code>0:</code> so that our answers will not be offset by one, and supply it to our indexing function <code>(!!)</code>.</p>\n\n<h1><a href=\"https://www.haskell.org/\" rel=\"nofollow noreferrer\">Haskell</a>, 56 bytes</h1>\n\n\n\n<pre class=\"lang-hs prettyprint-override\"><code>f 0=[0]\nf x|u&lt;-f(x-1)!!0=[u+x,u+x-1..u+1]\n(!!)$[0..]&gt;&gt;=f\n</code></pre>\n\n<p><a href=\"https://tio.run/##y0gszk7Nyfn/P03BwDbaIJYrTaGiptRGN02jQtdQU1ERKFiqXaEDxLqGenql2oaxXIm2GoqKmirRBnp6sXZ2tmn/cxMz82wLijLzSlRyEwsUEqOBKg0NDGL/AwA\" rel=\"nofollow noreferrer\" title=\"Haskell – Try It Online\">Try it online!</a></p>\n\n<p>This one is 2 bytes longer but a bit more elegant in my opinion.</p>\n"},{"answer_id":151767,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/151767#151767","body":"<h1><a href=\"https://github.com/dloscutoff/Esolangs/tree/master/tinylisp\" rel=\"nofollow noreferrer\">tinylisp</a>, 78 bytes</h1>\n\n<pre><code>(d _(q((R N T)(i(l T N)(_(a R 1)N(a T R))(a 2(a T(s T(a N R\n(d f(q((N)(_ 2 N 1\n</code></pre>\n\n<p>Defines a function <code>f</code> that performs the mapping. <a href=\"https://tio.run/##FYs7CsAgEET7nGLK2dJArmEh9rIhBAQTzafJ6c1aDG8Y3rz5/Ep@Wu/ckHiRAR5RmFkQ4YWJigAn3hgRRIzz6HwsanaY7LuP79Ax2@Q6S9UNJa@33p9MPLRhB91b4RaR/gM\" rel=\"nofollow noreferrer\" title=\"tinylisp – Try It Online\">Try it online!</a></p>\n\n<h3>Ungolfed</h3>\n\n<p>We find the smallest triangular number that is greater than or equal to the input number, as well as which row of the triangle our number is in. From these, we can calculate the flipped version of the number.</p>\n\n<ul>\n<li>If the current triangular number is less than N, recurse to the next row of the triangle. (We treat the top row as row 2 to make the math simpler.)</li>\n<li>Otherwise, the flipped version of N is (T-N)+(T-R)+2.</li>\n</ul>\n\n<p>The main function <code>flip</code> simply calls the helper function <code>_flip</code> starting from the top row.</p>\n\n<pre><code>(load library)\n\n(def _flip\n (lambda (Num Row Triangular)\n  (if (less? Triangular Num)\n   (_flip Num (inc Row) (+ Triangular Row))\n   (+ 2\n    (- Triangular Num)\n    (- Triangular Row))))))\n\n(def flip\n (lambda (Num) (_flip Num 2 1)))\n</code></pre>\n"},{"answer_id":151763,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/151763#151763","body":"<h1><a href=\"https://github.com/barbuz/Husk\" rel=\"nofollow noreferrer\">Husk</a>, 6 bytes</h1>\n\n<pre><code>!ṁ↔´CN\n</code></pre>\n\n<p><a href=\"https://tio.run/##yygtzv7/X/HhzsZHbVMObXH2@///v6GBgQEA\" rel=\"nofollow noreferrer\" title=\"Husk – Try It Online\">Try it online!</a></p>\n\n<h3>Explanation</h3>\n\n<pre><code>!ṁ↔´CN  -- implicit input N, for example: 4\n   ´ N  -- duplicate the natural numbers:\n           [1,2,3,…] [1,2,3,…]\n    C   -- cut the second argument into sizes of the first:\n           [[1],[2,3],[4,5,6],[7,8,9,10],…]\n ṁ↔     -- map reverse and flatten:\n           [1,3,2,6,5,4,10,9,8,7,15,…\n!       -- index into that list:\n           6\n</code></pre>\n"},{"answer_id":119456,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/119456#119456","body":"<h1>J, 25 bytes</h1>\n\n<pre><code>3 :'&gt;:y-~*:&gt;.-:&lt;:%:&gt;:8*y'\n</code></pre>\n\n<p>As an explanation, consider <code>f(n) = n(n+1)/2</code>. <code>f(r)</code>, given the row <code>r</code>, returns the leftmost number of the the <code>r</code><sup>th</sup> row of the mirrored triangle. Now, consider <code>g(n) = ceiling[f⁻¹(n)]</code>. <code>g(i)</code>, given the index <code>i</code>, returns the row on which index i is found. Then, <code>f(g(n))</code> returns the leftmost number of the row on which index n is found. So, <code>h(n) = f(g(n)) - (n - f(g(n)-1)) + 1</code> is the answer to the above problem. </p>\n\n<p>Simplifying, we get <code>h(n) = [g(n)]² - n + 1 = ceiling[(-1 + sqrt(1 + 8n))/2]² - n + 1</code>.</p>\n\n<p>From the looks of @Arnauld's formula, it appears that: </p>\n\n<p><code>ceiling[(-1 + sqrt(1 + 8n))/2] = floor[1/2 + sqrt(2n)]</code>.</p>\n"},{"answer_id":119407,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/119407#119407","body":"<h1>APL (Dyalog), 27 bytes</h1>\n<p>I've got two solutions at the same bytecount.</p>\n<p>A train:</p>\n<pre><code>⊢⊃⊃∘(,/{⌽(+/⍳⍵-1)+⍳⍵}¨∘⍳)\n</code></pre>\n<p><a href=\"https://tio.run/nexus/apl-dyalog#@@/4qG3Co65Fj7qaQahjhoaOfvWjnr0a2vqPejc/6t2qa6ipDWHVHloBlAeyNf//dwSyezcbGgAA\" rel=\"nofollow noreferrer\" title=\"APL (Dyalog Unicode) – TIO Nexus\">Try it online!</a></p>\n<p>And a dfn:</p>\n<pre><code>{⍵⊃⊃((⍳⍵),.{1+⍵-⍳⍺}+\\⍳⍵)}\n</code></pre>\n<p><a href=\"https://tio.run/nexus/apl-dyalog#@@/4qG1C9aPerY@6moFIQ@NR72YgT1NHr9pQG8jQBfN31WrHQCVq//93PLQCyDE0AAA\" rel=\"nofollow noreferrer\" title=\"APL (Dyalog Unicode) – TIO Nexus\">Try it online!</a></p>\n<p>Both of these solutions first create the flipped triangle and then extract element at the index stated by the argument (<code>1</code>-based).</p>\n"},{"answer_id":117980,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117980#117980","body":"<h1>C#, <s>46</s> 44 bytes</h1>\n\n<pre><code>n=&gt;Math.Pow((int)(Math.Sqrt(2*n)+.5),2)-n+1;\n</code></pre>\n\n<p>I port <a href=\"https://codegolf.stackexchange.com/a/117883/15214\">@Arnauld's solution</a>. Thank you!</p>\n\n<ul>\n<li>Pow of 0.5 is Sqrt. 2 bytes saved!</li>\n</ul>\n"},{"answer_id":117964,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117964#117964","body":"<h1>PHP, 35 Bytes</h1>\n\n<pre><code>&lt;?=((2*$argn)**.5+.5^0)**2-$argn+1;\n</code></pre>\n\n<p>Same formula that is used in <a href=\"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117883#117883\">Arnaulds Approach</a></p>\n"},{"answer_id":117963,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117963#117963","body":"<h2>Batch, 70 bytes</h2>\n\n<pre><code>@set/ai=%2+1,j=%3+i\n@if %j% lss %1 %0 %1 %i% %j%\n@cmd/cset/ai*i+1-%1\n</code></pre>\n\n<p>Uses a loop to find the index of the triangular number at least as large as <code>n</code>.</p>\n"},{"answer_id":117881,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117881#117881","body":"<h1><a href=\"https://github.com/DennisMitchell/jelly\" rel=\"nofollow noreferrer\">Jelly</a>, <s>8</s> 7 bytes</h1>\n\n<pre><code>RṁR€UFi\n</code></pre>\n\n<p><em>Thanks to @ErikTheOutgolfer for saving 1 byte!</em></p>\n\n<p><a href=\"https://tio.run/nexus/jelly#@x/0cGdj0KOmNaFumf@P7jncDmS6//9vqKNgpKNgrKNgoqNgCMSWlgYgAihsaGBgACKNTcGkGQA\" rel=\"nofollow noreferrer\" title=\"Jelly – TIO Nexus\">Try it online!</a></p>\n\n<h3>How it works</h3>\n\n<pre><code>RṁR€UFi  Main link. Argument: n\n\nR        Range; yield [1, ..., n].\n  R€     Range each; yield [[1], [1, 2], [1, 2, 3], ..., [1, ..., n]].\n ṁ       Mold the left argument like the right one, yielding\n         [[1], [2, 3], [4, 5, 6], ...]. The elements of the left argument are \n         repeated cyclically to fill all n(n+1)/2 positions in the right argument.\n    U    Upend; reverse each flat array, yielding [[1], [3, 2], [6, 5, 4], ...].\n     F   Flatten, yielding [1, 3, 2, 6, 5, 4, ...].\n      i  Index; find the first index of n in the result.\n</code></pre>\n"},{"answer_id":117932,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117932#117932","body":"<h1><a href=\"https://github.com/Adriandmen/05AB1E\" rel=\"nofollow noreferrer\">05AB1E</a>, 9 bytes</h1>\n\n<pre><code>·LD£í˜¹&lt;è\n</code></pre>\n\n<p><a href=\"https://tio.run/nexus/05ab1e#ARUA6v//wrdMRMKjw63LnMK5PMOo//80MDA\" rel=\"nofollow noreferrer\" title=\"05AB1E – TIO Nexus\">Try it online!</a></p>\n\n<p><strong>Explanation</strong></p>\n\n<pre><code>·L          # push range [1 ... 2n]\n  D         # duplicate\n   £        # split the first list into pieces with size dependent on the second list\n    í       # reverse each sublist\n     ˜      # flatten\n      ¹&lt;è   # get the element at index &lt;input&gt;-1\n</code></pre>\n\n<p>Array flattening unfortunately doesn't handle larger lists very well.<br>\nAt the cost of 1 byte we could do <a href=\"https://tio.run/nexus/05ab1e#@39oe4lRlfbh9XmHdura/f9vaWkIAA\" rel=\"nofollow noreferrer\">·t2z+ïn¹-></a> using the mathematical formula <code>floor(sqrt(2*n)+1/2)^2 - n + 1</code> found on <a href=\"https://oeis.org/A038722\" rel=\"nofollow noreferrer\">OEIS</a>.</p>\n"},{"answer_id":117926,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117926#117926","body":"<h2><a href=\"https://github.com/m-ender/alice\" rel=\"noreferrer\">Alice</a>, 27 bytes</h2>\n\n<p><em>Thanks to Sp3000 for the <code>.C</code> idea.</em></p>\n\n<pre><code>/o\n\\i@/.2:e2,tE*Y~Z.H2*~.C+\n</code></pre>\n\n<p><a href=\"https://tio.run/nexus/alice#@6@fzxWT6aCvZ2SVaqRT4qoVWRel52GkVafnrP3/v6GRsYkpAA\" rel=\"noreferrer\" title=\"Alice – TIO Nexus\">Try it online!</a></p>\n\n<h3>Explanation</h3>\n\n<p>I think there may be a shorter  way to compute this using triangular numbers, but I thought this is an interesting abuse of a built-in, so here's a different solution.</p>\n\n<p>The basic idea is to make use of Alice's \"pack\" and \"unpack\" built-ins. \"Pack\", or <code>Z</code>, takes two integers maps them bijectively to a single integer. \"Unpack\", or <code>Y</code>, inverts this bijection and turns one integer into two. Normally, this can be used to store a list or tree of integers in a single (large) integer and recover the individual values later. However, in this case we can use the functions in the opposite order, to let the nature of the bijection work for us.</p>\n\n<p>Unpacking one integer into two integers basically consists of three steps:</p>\n\n<ol>\n<li>Map <strong>ℤ → ℕ</strong> (including zero) with a simple \"folding\". That is, map negative integers to odd naturals, and non-negative integers to even naturals.</li>\n<li><p>Map <strong>ℕ → ℕ<sup>2</sup></strong>, using the <a href=\"https://en.wikipedia.org/wiki/Pairing_function#Cantor_pairing_function\" rel=\"noreferrer\">Cantor pairing function</a>. That is, the naturals are written along the diagonals of an infinite grid and we return the indices:</p>\n\n<pre><code>   ...\n3  9 ...\n2  5 8 ...\n1  2 4 7 ...\n0  0 1 3 6 ...\n\n   0 1 2 3\n</code></pre>\n\n<p>E.g. <code>8</code> would be mapped to the pair <code>(1, 2)</code>.</p></li>\n<li><p>Map <strong>ℕ<sup>2</sup> → ℤ<sup>2</sup></strong>, using the inverse of step 1 on each integer individually. That is, odd naturals get mapped to negative integers, and even naturals get mapped to non-negative integers.</p></li>\n</ol>\n\n<p>To pack two integers into one, we simply invert each of those steps.</p>\n\n<p>Now, we can see that the structure of the Cantor pairing function conveniently encodes the triangle we need (although the values are off-by-one). To reverse those diagonals, all we need to do is swap the <strong>x</strong> and <strong>y</strong> coordinates into the grid.</p>\n\n<p>Unfortunately, since all three of the above steps are combined into a single built-in <code>Y</code> (or <code>Z</code>), we need to undo the <strong>ℤ → ℕ</strong> or <strong>ℕ → ℤ</strong> mappings ourselves. However, while doing so we can save a couple of bytes by directly using <strong>ℕ<sup>+</sup> → ℤ</strong> or <strong>ℤ → ℕ<sup>+</sup></strong> mappings, to take care of the off-by-one error in the table. So here is the entire algorithm:</p>\n\n<ol>\n<li>Map <strong>ℕ<sup>+</sup> → ℤ</strong> using <strong>(n/2) * (-1)<sup>n-1</sup></strong>. This mapping is chosen such that it cancels the implicit <strong>ℤ → ℕ</strong> mapping during unpacking, except that it shifts the value down by 1.</li>\n<li>Unpack the result into two integers.</li>\n<li>Swap them.</li>\n<li>Pack the swapped values into a single integer again.</li>\n<li>Map <strong>ℤ → ℕ<sup>+</sup></strong> using <strong>|2n| + (n≥0)</strong>. Again, this mapping is chosen such that it cancels the implicit <strong>ℕ → ℤ</strong> mapping during packing, except that it shifts the value up by 1.</li>\n</ol>\n\n<p>With that out of the way, we can look at the program:</p>\n\n<pre><code>/o\n\\i@/...\n</code></pre>\n\n<p>This is simply a framework for linear arithmetic programs with integer input and output.</p>\n\n<pre><code>.    Duplicate the input.\n2:   Halve it.\ne    Push -1.\n2,   Pull up the other copy of the input.\nt    Decrement.\nE    Raise -1 to this power.\n*    Multiply. We've now computed (n/2) * (-1)^(n-1).\nY    Unpack.\n~    Swap.\nZ    Pack.\n.H   Duplicate the result and take its absolute value.\n2*   Double.\n~    Swap with other copy.\n.C   Compute k-choose-k. That's 1 for k ≥ 0 and 0 for k &lt; 0.\n+    Add. We've now computed |2n| + (n≥0).\n</code></pre>\n"},{"answer_id":117892,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117892#117892","body":"<h1><a href=\"https://github.com/Adriandmen/05AB1E\" rel=\"nofollow noreferrer\">05AB1E</a>, 30 bytes</h1>\n\n<pre><code>U1V[YLO&gt;X›iYLOX-UY&lt;LO&gt;X+,q}Y&gt;V\n</code></pre>\n\n<p><a href=\"https://tio.run/nexus/05ab1e#@x9qGBYd6eNvF/GoYVcmkBGhGxppA@Jr6xTWRtqF/f8PAA\" rel=\"nofollow noreferrer\">Try it online!</a></p>\n"},{"answer_id":117883,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117883#117883","body":"<h2>JavaScript (ES7), 26 bytes</h2>\n<pre class=\"lang-js prettyprint-override\"><code>n=&gt;((2*n)**.5+.5|0)**2-n+1\n</code></pre>\n<p>An implementation of the following formula <a href=\"https://oeis.org/A038722\" rel=\"noreferrer\">from OEIS</a>:</p>\n<p><a href=\"https://i.sstatic.net/FIbAc.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/FIbAc.png\" alt=\"formula\" /></a></p>\n<h3>Demo</h3>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let f =\n\nn=&gt;((2*n)**.5+.5|0)**2-n+1\n\nfor(n = 1; n &lt;= 50; n++) {\n  console.log(n, '-&gt;', f(n))\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"answer_id":117886,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117886#117886","body":"<h1><a href=\"https://www.gnu.org/software/octave/\" rel=\"nofollow noreferrer\">Octave</a>, <s>71</s> 68 bytes</h1>\n\n<p><em>3 bytes saved thanks to <a href=\"https://codegolf.stackexchange.com/users/31957/conor-obrien\">Conor O'Brien</a>.</em></p>\n\n\n\n<pre class=\"lang-matlab prettyprint-override\"><code>x=triu(ones(n=input('')));x(~~x)=1:nnz(x);disp(nonzeros(flip(x))(n))\n</code></pre>\n\n<p>This doesn't work for large inputs due to memory limitations.</p>\n\n<p><a href=\"https://tio.run/nexus/octave#Dcg7CsAgEAXA4/hel5RGvE0MLIRV/MBi4dVNppxtsVcZyJoaNIqW0eEcyWBYyxjPS3XCGG5pBZp1ppobnlfKv4SSe3t/fA\" rel=\"nofollow noreferrer\" title=\"Octave – TIO Nexus\">Try it online!</a></p>\n\n<h3>Explanation</h3>\n\n<p>Consider input <code>n = 4</code>. The code first builds the matrix</p>\n\n<pre class=\"lang-matlab prettyprint-override\"><code> 1     1     1     1\n 0     1     1     1\n 0     0     1     1\n 0     0     0     1\n</code></pre>\n\n<p>Then it replaces nonzero entries in column-major order (down, then across) by <code>1</code>, <code>2</code>, <code>3</code> ... :</p>\n\n<pre class=\"lang-matlab prettyprint-override\"><code> 1     2     4     7\n 0     3     5     8\n 0     0     6     9\n 0     0     0    10\n</code></pre>\n\n<p>Then it flips the matrix vertically:</p>\n\n<pre class=\"lang-matlab prettyprint-override\"><code> 0     0     0    10\n 0     0     6     9\n 0     3     5     8\n 1     2     4     7\n</code></pre>\n\n<p>Finally, it takes the <code>n</code>-th nonzero value in column-major order, which in this case is <code>6</code>.</p>\n"},{"answer_id":117887,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117887#117887","body":"<h1><a href=\"https://gcc.gnu.org/\" rel=\"nofollow noreferrer\">C (gcc)</a>, 48 bytes</h1>\n\n\n\n<pre class=\"lang-c prettyprint-override\"><code>k,j,l;f(n){for(k=j=0;k&lt;n;)l=k,k+=++j;n=1+k-n+l;}\n</code></pre>\n\n<p><a href=\"https://tio.run/nexus/c-gcc#LY3RCoMwDEXf/YogCC2N0KgbSOx@ZPNhDxNqXTecb@K3u9TtQs4NSbjZA4448aCiXofXrIIbneXQRdaTCxiMM2bk6MiEMpqJt/1591HpNQORjwssj89yJerBwQqEUCHUCA0CSbWtTZAxWWsT69PBs7CqmxNsfCSl3ynNS4xlsQ6IxI3Rxz7pPcvFoPLCQ3mBwt9ijr/3vkcY1L/VmrNt/wI\" rel=\"nofollow noreferrer\" title=\"C (gcc) – TIO Nexus\">Try it online!</a></p>\n\n<p>Probably suboptimal, but I'm pretty happy with this one. Uses the fact that</p>\n\n<p>NTF<sub><strong>N</strong></sub> = T<sub><strong>N</strong></sub> + <a href=\"http://oeis.org/A057944\" rel=\"nofollow noreferrer\">A057944</a>(<strong>N</strong>) - <strong>N</strong> + 1</p>\n\n<p>(If I wrote the formula down correctly, that is.)</p>\n"},{"answer_id":117884,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117884#117884","body":"<h1><a href=\"https://github.com/DennisMitchell/jelly\" rel=\"noreferrer\">Jelly</a>, 8 bytes</h1>\n\n<pre><code>Ḥ½+.Ḟ²‘_\n</code></pre>\n\n<p><a href=\"https://tio.run/nexus/jelly#ARkA5v//4bikwr0rLuG4nsKy4oCYX////zEyMzQ1\" rel=\"noreferrer\" title=\"Jelly – TIO Nexus\">Try it online!</a></p>\n\n<p>Port of my MATL answer.</p>\n"},{"answer_id":117882,"question_id":117879,"link":"https://codegolf.stackexchange.com/questions/117879/number-triangle-flip/117882#117882","body":"<h1><a href=\"https://github.com/lmendo/MATL\" rel=\"nofollow noreferrer\">MATL</a>, <s>15</s> 11 bytes</h1>\n\n<pre><code>EX^.5+kUG-Q\n</code></pre>\n\n<p><a href=\"https://tio.run/nexus/matl#@@8aEadnqp0d6q4b@P@/oZGxiSkA\" rel=\"nofollow noreferrer\" title=\"MATL – TIO Nexus\">Try it online!</a></p>\n\n<p>This uses the formula</p>\n\n<pre><code>a(n) = floor(sqrt(2*n)+1/2)^2 - n + 1.\n</code></pre>\n"}]