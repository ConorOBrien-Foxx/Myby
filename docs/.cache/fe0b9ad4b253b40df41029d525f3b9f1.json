[{"answer_id":276123,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/276123#276123","body":"<h1>Uiua, 15 bytes</h1>\n<pre><code>⍜⊕□◌.⊞+⟜⇌⇡⌈÷2⧻.\n</code></pre>\n<p>Try it: <a href=\"https://uiua.org/pad?src=0_13_0-dev_3__IyBFeHBlcmltZW50YWwhCkYg4oaQIOKNnOKKleKWoeKXjC7iip4r4p-c4oeM4oeh4oyIw7cy4qe7LgpGIHtbNV0gWzQgMTBdIFszIDkgMTVdIFsyIDggMTQgMjBdIFsxIDcgMTMgMTkgMjVdIFs2IDEyIDE4IDI0XSBbMTEgMTcgMjNdIFsxNiAyMl0gWzIxXX0K\" rel=\"nofollow noreferrer\">Uiua pad</a></p>\n<p>This should be 13 bytes because <code>⍜⊕□◌.</code> could hypothetically be replaced by <code>⌝⊕□</code>, but it hasn't been implemented yet.</p>\n<p>Explanation:</p>\n<p><code>⌈÷2⧻</code> - Get the side length by dividing the length by 2 and rounding up.</p>\n<p><code>⊞+⟜⇌⇡</code> - Take the range to this number and it reversed, and create the addition table of those two lists.</p>\n<p>For example if the side length was 5 the addition table would be:</p>\n<pre><code>    4 3 2 1 0\n  ╭─           \n0 ╷ 4 3 2 1 0  \n1   5 4 3 2 1  \n2   6 5 4 3 2  \n3   7 6 5 4 3  \n4   8 7 6 5 4  \n              ╯\n</code></pre>\n<p>As you can see, there is a number assigned to each diagonal, starting with zero at the top left.</p>\n<p><code>⍜⊕□◌.</code> (what should be <code>⌝⊕□</code>) - Use this matrix to anti-group the input.</p>\n"},{"answer_id":270185,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/270185#270185","body":"<h1><a href=\"https://github.com/Vyxal/Vyxal/tree/version-2\" rel=\"nofollow noreferrer\">Vyxal</a>, 2 bytes</h1>\n<pre><code>Þ„\n</code></pre>\n<p><a href=\"https://vyxal.pythonanywhere.com/?v=2&amp;c=1#WyIiLCIiLCLDnuKAniIsIiIsIltbNV0sIFs0LCAxMF0sIFszLCA5LCAxNV0sIFsyLCA4LCAxNCwgMjBdLCBbMSwgNywgMTMsIDE5LCAyNV0sIFs2LCAxMiwgMTgsIDI0XSwgWzExLCAxNywgMjNdLCBbMTYsIDIyXSwgWzIxXV0iXQ==\" rel=\"nofollow noreferrer\">Try it Online!</a></p>\n<p>So apparently lyxal forgot there was a built in for this :p</p>\n"},{"answer_id":259109,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/259109#259109","body":"<h1><a href=\"https://www.wolfram.com/wolframscript/\" rel=\"nofollow noreferrer\">Wolfram Language (Mathematica)</a>, 77 bytes</h1>\n<pre><code>(n=⌊Length@#/2⌋;Total@MapThread[DiagonalMatrix[#1,#2]&amp;,{#,Range[-n,n]}])&amp;\n</code></pre>\n<p>Input from the bottom-left diagonal to the top-right diagonal</p>\n<p><a href=\"https://tio.run/##FYjPCoIwGMBfZTCQgi/SVUaEsEPHhAhvssNHTR3oZ4wdgrEXKJ/SF1l5@v0Z0HV6QGceGJsirqiYp89VU@s6ybdinr7nanTYyxJfVWc1PuuLwXYk7Et01rxrngEXKgHP4Y7U6npDQCqodRJv1pCTjfQ@PwZgfi9SYKfFcmBiByxLl/jPbKE4hBB/\" rel=\"nofollow noreferrer\" title=\"Wolfram Language (Mathematica) – Try It Online\">Try it online!</a></p>\n"},{"answer_id":256331,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/256331#256331","body":"<h1><a href=\"https://www.informatik.uni-kiel.de/%7Epakcs/\" rel=\"nofollow noreferrer\">Curry (PAKCS)</a>, 73 bytes</h1>\n<pre><code>foldl(!)[]\n[]#[]=[]\n(a:b)#(c:d)=(c:a):b#d\na!b=(a++[[]])#b\n(a++b)!c=a++b#c\n</code></pre>\n<p><a href=\"https://tio.run/##HYxLCsMwDET3OYWCNzZxoXbSX8AnEVrYDoHSpC0pXfT07sQb6Y3mofzdtt/hHR/5U8oc5tcyLbo1LA2LYgkAHcdklM7jZAJmNGNSUxPbFHTsOmYRo1KzczJtDvtWuazx/qRAMzGfxBIPltxxh97SDVyP3tIVjM7Xzlm6IENxcHx1zgjwHEQ/VAmWg@b7mtB7X585kfIH\" rel=\"nofollow noreferrer\" title=\"Curry (PAKCS) – Try It Online\">Try it online!</a></p>\n<p>A port of <a href=\"https://codegolf.stackexchange.com/a/256312/9288\">@Wheat Wizard's Haskell + hgl answer</a>.</p>\n"},{"answer_id":256312,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/256312#256312","body":"<h1>Haskell + <a href=\"https://gitlab.com/wheatwizard/haskell-golfing-library\" rel=\"nofollow noreferrer\">hgl</a>, 25 bytes</h1>\n<pre class=\"lang-haskell prettyprint-override\"><code>lH(F~&lt;zdm&lt;&lt;lpW[]&lt;lg)&lt;mm p\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=m708I7E4OzUnZ2W0km6Ec0CAUuxN1czcgvyiEoXC0sSczLTM1BSFgKLUnNKUVC6oRABXmm3M0tKSNF2LnTkeGm51NlUpuTY2OQXh0bE2OemaNrm5CgUQ-ZsGuYmZebYp-VwKCrnxCgVFCioKaQrRSvZKOkoREUo6CkqGRsYgSlUVRDooxUL0LVgAoQE\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n<h2>Explanation</h2>\n<p>To build the matrix we use a fold, each step adding a new diagonal. So the bulk of this answer is the function that takes a partial matrix and adds a new diagonal.</p>\n<p>The way this process works is that we want to zip the new diagonal with the matrix.  If the diagonal is longer than the matrix so far (length of the matrix is the number of rows), then we want to start the zip with the two aligned at the front.</p>\n<pre><code>1 ####      1####\n2  ###       2###\n3   ##  --&gt;   3##\n4    #         4#\n5               5\n</code></pre>\n<p>If the diagonal is shorter we want to align it at the bottom:</p>\n<pre><code>  #####     #####\n  #####     #####\n1  #### --&gt; 1####\n2   ###      2###\n3    ##       3##\n</code></pre>\n<p>To do this we pad the diagonal out to the length of the list with empty values. (<code>lpW[]&lt;lg</code>)  If it's longer this does nothing, but if it's shorter it aligns the two at the bottom.</p>\n<p>Then we zip the two with <code>zdm</code>.  This is the &quot;monoidal&quot; zip, so it pads the shorter value to the length of the longer and combines with the monoid operation.</p>\n<p>The one hitch is that for this all to work we need to convert the integers in the diagonals to lists, that way we can have empty values in the padding.</p>\n<h2>Reflection</h2>\n<p>This is a very elegant solution, but it does suggest improvements.</p>\n<ul>\n<li>It hurts me to use <code>lg</code>.  Because there's nothing to bind the type <code>l</code> won't work. <code>lpW^.lg</code> should probably be builtin, padding one list to the length of another seems like a useful operation.  This would save 3 bytes here.</li>\n<li><code>fb F</code> seems like a useful combinator.  However it would need to be a 1 byte operator to save anything in this particular scenario.</li>\n</ul>\n"},{"answer_id":252406,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252406#252406","body":"<h1><a href=\"https://github.com/somebody1234/Charcoal\" rel=\"nofollow noreferrer\">Charcoal</a>, 18 bytes</h1>\n<pre><code>Ｉ⮌Ｅ⊘⊕ＬθＥ⊘⊕Ｌθ⊟§θ⁺ιλ\n</code></pre>\n<p><a href=\"https://tio.run/##jYpLCsIwEECvkuUUIjhp6wdX4saCQnEbsghtsIWYtmks3j5OgwdwYGDee9N02jeDtjHWvncBLnoO8DCL8bOBux7hqu1iWqhc483LuED3zbhn6GDKsoyzf37qYYRzqFxrPjAR2vcMPWc2@80pRimlQMWZxB1nQqQLOcM9Ub4SaRS0BxJFypxRxJz2SK5cHT1Qx4J4uzJFapgaSUyyVErFzWK/\" rel=\"nofollow noreferrer\" title=\"Charcoal – Try It Online\">Try it online!</a> Link is to verbose version of code. Takes input from bottom left to top right. Explanation:</p>\n<pre><code>      θ             Input array\n     Ｌ              Length\n    ⊕               Incremented\n   ⊘                Halved\n  Ｅ                 Map over implicit range\n           θ        Input array\n          Ｌ         Length\n         ⊕          Incremented\n        ⊘           Halved\n       Ｅ            Map over implicit range\n              θ     Input array\n             §      Indexed by\n                ι   Outer index\n               ⁺    Plus\n                 λ  Inner index\n            ⊟       Pop from list\n ⮌                  Reversed\nＩ                   Cast to string\n                    Implicitly print\n</code></pre>\n"},{"answer_id":252123,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252123#252123","body":"<h1><a href=\"https://www.python.org\" rel=\"noreferrer\">Python</a>, 60 bytes (@Mukundan314)</h1>\n<pre class=\"lang-python prettyprint-override\"><code>f=lambda x:x and zip(map(list.pop,x[::-2][::-1]),*f(x[:-1]))\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=NVBBasMwELz7FXtcGVmJA4HWRC8xpmyruBVY2sVRwO5Xesmlvfc5_U0lk1x2h9lhZtivH1nTB8fb7fuaxubp7zTaicKrI1i6BSg6-PSCgQQnf0lGWPTSd11zGMpsB6XrETNToLp7_PogPCeI1yAr0AWiVHfqjWWtCGymzJzdOWzLx4R73e41HvVRqcplRZ8lztM7ko67XXOosWlVXUdlEpcuqGDkGSL4uLm99N3zMFRst-OIJcq481kKQKeyrcwliLTTrJGtJWVomvBR_PGEfw\" rel=\"noreferrer\">Attempt This Online!</a></p>\n<h2><a href=\"https://www.python.org\" rel=\"noreferrer\">Python</a>, 62 bytes</h2>\n<pre class=\"lang-python prettyprint-override\"><code>f=lambda x:x and[*zip(map(list.pop,x[::-2][::-1]),*f(x[:-1]))]\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=NZBBasMwEEX3PoWWIyErcSDQGpSLGFGmVZwILM3gKGD3Kt1k0256ot6mUppuZobP5_3PfHzxms-UbrfPax7bp5_DaCeMrx7F0i8Ckx_Ue2CIyDCFSzZMrJeh79udq7NzUqsRilJP6R6U7xCZ5izSNfIq8CISNw_pjXhtUNgimbnwKd5XSBm2uttq2Ou9lI0vjqFYfMAToE6bTbtT0HZSqSRNploGpBhpFkmEdKe9DP2zcw3ZEWqK8ccj1wN8AfJcI1B7TRrIWpQGpwmk_Kv8_4Bf\" rel=\"noreferrer\">Attempt This Online!</a></p>\n<p>Uses input format 1 (alternating upper and lower diagonals). Destroys the input.</p>\n"},{"answer_id":252099,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252099#252099","body":"<h1><a href=\"https://github.com/DennisMitchell/jellylanguage\" rel=\"nofollow noreferrer\">Jelly</a>, <s>9</s> 8 bytes</h1>\n<pre><code>ṙLHĊƊṚŒḌ\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=m700KzUnp3LBgqWlJWm6Fpt8PI50cT3cOfNw-8Ods45OerijZ0lxUnIxVPpmYbRSdLRprI5CtImOgqEBiGGso2AJZIMFjXQULIBsoJwRWM5QR8EcyAcqMQSqMQKrMQNygOoMgQqNTMCKgKoMgcqMjME8oLyREdgww9hYpViozQA\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n<p>How?</p>\n<pre><code>ṙLHĊƊṚŒḌ : Main Link\n L       : length; used to count the number of elements\n  H      : Halve; divides by 2 \n   Ċ     : Rounds up (ceil)\n    Ɗ    : Last three links as a monad\nṙ        : Rotate x y times (x is implied input)\n     Ṛ   : Reverse element\n      ŒḌ : Reconstruct matrix from its diagonals\n</code></pre>\n"},{"answer_id":252130,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252130#252130","body":"<h1><a href=\"https://www.ruby-lang.org/\" rel=\"noreferrer\">Ruby</a>, 62 bytes</h1>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>f=-&gt;d{(w=0..l=d.size/2).map{|r|w.map{|c|d[l+r-c][[r,c].min]}}}\n</code></pre>\n<p><a href=\"https://tio.run/##VYzRCoIwFIbvfYpBN0pzbSuNAnuFHuBwLmwmCDNkJVLqs6@5QeTVzv7/@37T397W1kV6qcZ4KDhjuqjYs/ncdzJhbdmNk5mGcKipAr01qUIAQxWytnngPM@2IzVTpdYxQIaYRBu49i88E/@Nol/tAo4UBCX5CSkBsV/TruAh98S/CiCzpeKUiOXNKZGOEp4/SBf7xfy4XnSYq4LqKS8F0il@ACP7BQ\" rel=\"noreferrer\" title=\"Ruby – Try It Online\">Try it online!</a></p>\n<p>Takes input as top-right to bottom-left.</p>\n<p>Maps 2d indexes to input, for example a 4X4 matrix:</p>\n<pre class=\"lang-ruby prettyprint-override\"><code>3,0  2,0  1,0  0,0\n4,0  3,1  2,1  1,1\n5,0. 4,1  3,2  2,2\n6,0  5,1  4,2  3,3\n</code></pre>\n"},{"answer_id":252088,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252088#252088","body":"<h1><a href=\"https://www.python.org\" rel=\"nofollow noreferrer\">Python</a>, <del>84</del> 79 bytes</h1>\n<p>-1 byte thanks to Kevin Cruijsen<br>\n-5 bytes thanks to Mukundan314 and 07.100.97.109</p>\n<pre class=\"lang-python prettyprint-override\"><code>lambda x:(z:=len(x)//2+1)and[x[z+c%z+~c//z][min(c%z,c//z)]for c in range(z*z)]\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=m72soLIkIz9vwdI0BVuFmKWlJWm6Fjf9chJzk1ISFSqsNKqsbHNS8zQqNPX1jbQNNRPzUqIroqu0k1WrtOuS9fWrYqNzM_M0gFwdEE8zNi2_SCFZITNPoSgxLz1Vo0oLKAY1NbGgKDOvRCNNIzraNDZWU5MLma8TbaKjYByroxBthCZnZAoSNdBRMATRZjoKRsZAtgGIY2IEFLYEC5uDdEEsWrAAQgMA\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n<p>Ported from Arnauld's JS answer</p>\n"},{"answer_id":252087,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252087#252087","body":"<h1><a href=\"https://github.com/Vyxal/Vyxal\" rel=\"noreferrer\">Vyxal</a>, <s>14</s> 12 bytes</h1>\n<pre><code>Ṗ'L√ẇÞDf?⁼;h\n</code></pre>\n<p><a href=\"https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZYnTOKImuG6h8OeRGY/4oG8O2giLCIiLCIxLDY5LDAsMTMiXQ==\" rel=\"noreferrer\">Try it Online!</a></p>\n<p>Math? Sensible methods of putting things into arrays? Programs that finish in reasonable time? Couldn't be me.</p>\n<p>Times out for anything bigger than a 2x2 matrix.</p>\n<p>Takes input as a flattened list and outputs a flattened list.</p>\n<h2>Explained (old)</h2>\n<pre><code>f₌ṖL√vẇ'ÞD?⁼;h\nf₌ṖL√           # Push all permutations of the flattened input, as well as the square root of the length of the flattened input  \n     vẇ         # Split each permutation into chunks of that length\n       'ÞD?⁼;   # Keep those only where the diagonals equal the input (this basically means try each and every single possible matrix from the input until one is found with the same diagonals)\n              h # Get the first (and only) item\n</code></pre>\n"},{"answer_id":252114,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252114#252114","body":"<h1><a href=\"https://github.com/dloscutoff/pip\" rel=\"noreferrer\">Pip</a> <code>-x</code>, 22 bytes</h1>\n<pre><code>Fi,YMX#*aFki+R,yPPOa@k\n</code></pre>\n<p>Inputs a nested list of diagonals, starting from the top right, as a command-line argument; outputs a flattened matrix in row-major order to stdout, one number per line. <a href=\"https://dso.surge.sh/#@WyJwaXAiLCIiLCJGaSxZTVgjKmFGa2krUix5UFBPYUBrIiwiIiwiIiwiLXggXCJbWzVdOyBbNDsgMTBdOyBbMzsgOTsgMTVdOyBbMjsgODsgMTQ7IDIwXTsgWzE7IDc7IDEzOyAxOTsgMjVdOyBbNjsgMTI7IDE4OyAyNF07IFsxMTsgMTc7IDIzXTsgWzE2OyAyMl07IFsyMV1dXCIiXQ==\" rel=\"noreferrer\">Try It Online!</a></p>\n<h3>Explanation</h3>\n<p>For an <span class=\"math-container\">\\$N\\$</span> by <span class=\"math-container\">\\$N\\$</span> matrix, the top row can be found by taking the first number from each of the first <span class=\"math-container\">\\$N\\$</span> diagonals and reversing them. If we remove these numbers from their respective diagonals, the next row is the reverse of the first remaining number in the first <span class=\"math-container\">\\$N\\$</span> non-empty diagonals, and so on.</p>\n<pre><code>Fi,YMX#*aFki+R,yPPOa@k\n        a               Command-line argument, evaluated (-x flag)\n      #*                Length of each sublist\n    MX                  Maximum (this gives the size of the desired matrix)\n   Y                    Store in y\nFi,                     For i in range(y):\n         Fk               For k in\n              ,y          range(y)\n             R            reversed\n           i+             with i added to each element:\n                   a@k      Sublist at that index\n                 PO         Pop its first element\n                P           Print the popped element\n</code></pre>\n"},{"answer_id":252113,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252113#252113","body":"<h1><a href=\"https://pari.math.u-bordeaux.fr\" rel=\"nofollow noreferrer\">PARI/GP</a>, 43 bytes</h1>\n<pre><code>a-&gt;matrix(w=#a\\2+1,,i,j,a[w+i-j][min(i,j)])\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=NY9BCsIwEEWvMuimpVMw01p1oReJQbKpRFRCqahncVMQ8UziZfyd2tX8_-flJ3m8o2_Cbh-7Z03r16Wt8-Un8_nm5Nsm3JLreuq3khnmwAf29pqF_ODsKZwTBKlL_0e-PsbjPfGUbyg24dxCTnozoTrxacpkrZ07jJLJzHpRMK2gNRSmJTR2ojvDtIAHYsCIMhUMOANQSoVAGWBSqMNeRMuM6weu0zEWVisVxZAOnTM0_LulGB9WCmKFq4Vz4xe7bpg_\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n<p>Takes input from top-right to bottom-left.</p>\n"},{"answer_id":252092,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252092#252092","body":"<h1><a href=\"https://www.jsoftware.com\" rel=\"noreferrer\">J</a>, <sup>21</sup> 20 bytes</h1>\n<pre><code>/:&amp;;&lt;/.@i.@(,-)@%:@#\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=TU9LCsIwEN33FE9FayGtSWtTGxUKgiAIgtuQlVjUhW4qeBc3deENvIzn8AKOiUoXycy83yTX26F-dvOWEka2VO77XjvyS0wVfDBwKDphhNl6Ob-fqzIcPQaqN54MomIfFX0WBkVXFR1HPV-Bt93sTijB0l_HISBziOQHxKnDECcQHMOYI4fMvO1lX9F6vTgaBa1TYzy9Olf_4c8IRoGGQfPPJZKmkLgvakUNV5xaC4P4VMloPfVWTE9gsIkya4aRiAhntBprcToyWLtxX69rV98\" rel=\"noreferrer\">Attempt This Online!</a></p>\n<p>Takes in flat, outputs flat.</p>\n<ul>\n<li><p><code>%:@#</code> Square root of list length, to get matrix side length.  Call it <code>n</code>.</p>\n</li>\n<li><p><code>(,-)</code> Create list <code>n -n</code></p>\n</li>\n<li><p><code>i.</code> Assuming <code>n</code> is 5, eg, this will create the matrix:</p>\n<pre><code>4  3  2  1  0\n9  8  7  6  5\n14 13 12 11 10\n19 18 17 16 15\n24 23 22 21 20\n</code></pre>\n</li>\n<li><p><code>&lt;/.@</code> Create the boxed diagonals of this matrix:</p>\n<pre><code>┌─┬───┬──────┬─────────┬────────────┬──────────┬────────┬─────┬──┐\n│4│3 9│2 8 14│1 7 13 19│0 6 12 18 24│5 11 17 23│10 16 22│15 21│20│\n└─┴───┴──────┴─────────┴────────────┴──────────┴────────┴─────┴──┘\n</code></pre>\n</li>\n<li><p><code>/:&amp;;</code> Unbox that and use it to sort the original input, ie, whatever sort would put this into order, apply it to the original input.  This does exactly what we want.</p>\n</li>\n</ul>\n"},{"answer_id":252086,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252086#252086","body":"<h1>JavaScript (ES6), 65 bytes</h1>\n<p>Expects the diagonals from top-right to bottom-left.</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>a=&gt;a[w=a.length&gt;&gt;1].map((_,y,A)=&gt;A.map((_,x)=&gt;a[w+y-x][x&lt;y?x:y]))\n</code></pre>\n<p><a href=\"https://tio.run/##bY/BDoIwEETvfkWPNBZCFwQxguE7msY0CKhBIEIUvh6XVU5ym9l529nezct02fPW9nbdXPKpiCcTJ0a9Y@NUeV321ySR2nmY1rLOYhQpj5N0sQMndDvag1bDcTwNh1FzPmVN3TVV7lRNaRWWUjstmPIFk@4sPMEi1DQEwfaoMQPKpGAhekQkMkBMgAY5iSD4BCElEQOPHOYA9JjU2L75b1@bLnVBRMJbhb4HuFj3OwS85Rc@4Jh2g3DenT4\" rel=\"nofollow noreferrer\" title=\"JavaScript (Node.js) – Try It Online\">Try it online!</a></p>\n<p>Also <strong>65 bytes</strong>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>a=&gt;[...a[w=a.length&gt;&gt;1]].map((_,y,A)=&gt;A.map(_=&gt;a[w+y--].shift()))\n</code></pre>\n<p><a href=\"https://tio.run/##bY/NDsIgEITvPgVHiJSUba16gKTPQUhDtD@a2hrbaHx6XFd70tvM7LfMcg73MB1up@ucDOOxjo2JwVinlAruYYLq66GdO2u19@oSrpxX8ilLYWxJtjIWufUzSbyaulMzcyFEPIzDNPa16seWN9y5jZfM5ZLp9C0yyfaoKQTJdqhxBjTTkm3RI6KRAWIKNMhpBCEnCCmNGGTkcA5Aj@GRQqx@2/@lS12xJ5H9hT4HpFj3PQSy5Rc5YEy7xfa9G18\" rel=\"nofollow noreferrer\" title=\"JavaScript (Node.js) – Try It Online\">Try it online!</a></p>\n<hr />\n<h1>Flatten format, 89 bytes</h1>\n<p>This version expects a flatten array of the diagonals from top-right to bottom-left and returns another flatten array.</p>\n<p>The only benefit is that there's only one <code>map()</code>. But the math is much more verbose. So yeah ... that's a bit silly. :-) There may be a better/shorter formula, though.</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>a=&gt;a.map((_,x)=&gt;a[y=x/w|0,x%=w,n=y+w+~x,(q=n&gt;w&amp;&amp;n-w)*~q-n*~n/2+(x&lt;y?x:y)],w=a.length**.5)\n</code></pre>\n<p><a href=\"https://tio.run/##bY7LCsIwFET3fkU2StLeVhO1PjD6ISIStL6oqS9MCtJfrxN0JW7C3DkzTE7mae6b2/HySGy5zZudboyem/RsLpyvyQscy0r7rnv1yLe1I6ur2MW1J37Vdu46HZs4EdXXxEa17aqY@1m18NNKrMhpkxa53T8OUZQORbMp7b0s8rQo93zHl0NiA2KyR6xPbAIFQxEbQ8FX8CWxEV5gCa7AM0hkJEIqlJGQiKgQAVNgSq6EaP1u/fE@A1lY7v/BYe4b@Q7gGoRvoZGN0Gje\" rel=\"nofollow noreferrer\" title=\"JavaScript (Node.js) – Try It Online\">Try it online!</a></p>\n<p>Given an input array of length <span class=\"math-container\">\\$N\\$</span>, we define for each index <span class=\"math-container\">\\$0\\le i \\lt N\\$</span>:</p>\n<p><span class=\"math-container\">$$x=i\\bmod w\\\\\ny=\\lfloor i/w \\rfloor\\\\\nn=y+w-x-1\\\\\nq=\\max(n-w,0)$$</span></p>\n<p>where <span class=\"math-container\">\\$w\\$</span> is the width of the matrix, i.e. <span class=\"math-container\">\\$\\sqrt{N}\\$</span>.</p>\n<p>The output value at this position is the value stored in the input array at the following index:</p>\n<p><span class=\"math-container\">$$\\frac{n\\times(n+1)}{2}-q\\times(q+1)+\\min(x,y)$$</span></p>\n"},{"answer_id":252085,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252085#252085","body":"<h1><a href=\"https://github.com/Adriandmen/05AB1E/wiki/Commands\" rel=\"nofollow noreferrer\">05AB1E</a>, <s>20</s> 18 <a href=\"https://github.com/Adriandmen/05AB1E/wiki/Codepage\" rel=\"nofollow noreferrer\">bytes</a></h1>\n<pre><code>g;ÝDδ-Z+èεNUεNX‚ßè\n</code></pre>\n<p>-2 bytes porting <a href=\"https://codegolf.stackexchange.com/a/252086/52210\"><em>@Arnauld</em>'s JavaScript answer</a> (somewhat). I have the feeling the <code>εNUεNX‚ßè</code> could perhaps be golfed some more.</p>\n<p>Input expected as option 2: top-right to bottom-left 2D list.<br />\nOutput as a matrix.</p>\n<p><a href=\"https://tio.run/##yy9OTMpM/f8/3frwXJdzW3SjtA@vOLfVLxSIIx41zDo8//CK//@jo01jdRSiTXQUDA1ADGMdBUsgGyxopKNgAWQD5YzAcoY6CuZAPlCJIVCNEViNGZADVGcIVGhkAlYEVGUIVGZkDOYB5Y2MwIYZxsYCAA\" rel=\"nofollow noreferrer\">Try it online</a> or <a href=\"https://tio.run/##NU07CsJAEO09RUjrEzKbzcZoYZPGRitBXLZQELFRwUSwCHgOQWxzAPUAbp9DeJF1x2AxnzfvM/vjcrVdu1M43h3KYhCEOKMTTsvij3K3Gdpb3jx6i66tm@dk5mv@uVzt3dauqvB@jZzWOjEGgdaRgSaojEfcnkTiQQTyXUHEINZIEYFFKm1FrJEtFSMDMRbogyREm5mCvDfDL06BBKgPIZkjUOqTefUfBFvJGPMF\" rel=\"nofollow noreferrer\">verify all test cases</a>.</p>\n<p><strong>Original 20 <a href=\"https://github.com/Adriandmen/05AB1E/wiki/Codepage\" rel=\"nofollow noreferrer\">bytes</a> answer:</strong></p>\n<pre><code>g&gt;;©FD®£€нR,¦ε®N&gt;›i¦\n</code></pre>\n<p>Input expected as option 2: top-right to bottom-left 2D list.<br />\nOutputs each inner row-list on separated newlines to STDOUT.</p>\n<p><a href=\"https://tio.run/##yy9OTMpM/f8/3frwukMr3VwOrTu0@FHTmgt7g3QOLTu39dA6P7tHDbsyDy37/z862jRWRyHaREfB0ADEMNZRsASywYJGOgoWQDZQzggsZ6ijYA7kA5UYAtUYgdWYATlAdYZAhUYmYEVAVYZAZUbGYB5Q3sgIbJhhbCwA\" rel=\"nofollow noreferrer\">Try it online</a> or <a href=\"https://tio.run/##NY09CsJAEIV7TxFSvyKz2fwpaBMEGwXbZQsFERsVTASLgHgVISBIOi0Em7UXz5CLrLsuNjPzZr73ZrObzVcLvfdH621ZdD0fB3T8SVn8Va6XvVejLsNcNercnq6f5xSqft9UM@63x8dK1bqqKnUfaCFEJCU8IQIJQYgz20K3YpERAcjUGCwEWYazABaKEwdZhrtTiAxkNUMK4mAuMwEZb4ZfXAxioBSM2xuBEpNsR/OBWStJKb8\" rel=\"nofollow noreferrer\">verify all test cases</a>.</p>\n<p><strong>Explanation:</strong></p>\n\n<pre class=\"lang-python prettyprint-override\"><code>g               # Get the length of the (implicit) input 2D list\n ;              # Halve it\n  Ý             # Push a list in the range [0, length(input)//2]\n   Dδ-          # Pop and push its subtraction table:\n   D            #  Duplicate the list\n    δ           #  Apply double-vectorized over the two lists:\n     -          #   Subtract\n      Z         # Push the flattened maximum (without popping),\n                # which is the length(input)//2\n       +        # Add it to each integer\n        è       # Index each inner-most integer into the (implicit) input\nε               # Map over each inner list of lists:\n NU             #  Store the map-index in variable `X`\n ε              #  Map over each inner list:\n  NX‚ß          #   Push the minimum of the inner and outer indices:\n  N             #    Push the inner map-index\n   X            #    Push the outer map-index from variable `X`\n    ‚           #    Pair them together\n     ß          #    Pop and push the minimum\n      è         #   Index that minimum into the list\n                # (after which the resulting matrix is output implicitly)\n</code></pre>\n<p><a href=\"https://codegolf.stackexchange.com/a/241931/52210\">Extracted from this 05AB1E answer of mine</a>, where I've used 45 degree matrix rotations for a word-search solver:</p>\n<pre class=\"lang-python prettyprint-override\"><code>g;              # Same as above\n  î             # Ceil it\n   ©            # Store this matrix-size in variable `®` (without popping)\n    F           # Pop and loop this many times:\n     D          #  Duplicate the current 2D list:\n      ®£        #  Only keep the first `®` amount of inner lists:\n        €н      #  Get the first item from each\n          R     #  Reverse it\n           ,    #  Pop and print it with trailing newline\n      ¦         #  Remove the first inner list\n       ε        #  Map over each remaining lists:\n            i   #   If\n        ®       #   dimension `®`\n           ›    #   is larger than\n         N&gt;     #   the 1-based map-index:\n             ¦  #    Remove the first item from this list\n</code></pre>\n"},{"answer_id":252091,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252091#252091","body":"<h1><a href=\"https://github.com/maxbergmark/mathgolf/blob/master/math_golf.txt\" rel=\"noreferrer\">MathGolf</a>, 21 <a href=\"https://github.com/maxbergmark/mathgolf/blob/master/code_page.py\" rel=\"noreferrer\">bytes</a></h1>\n<pre><code>h½)r■_@mÅε-_╙+§\\mÄ╓m§\n</code></pre>\n<p>Input expected as option 2: top-right to bottom-left 2D list.<br />\nOutput as a flattened list.</p>\n<p><a href=\"https://tio.run/##JY29DcIwEIV7NkE8pNzZceKOPYwV0UAKLCTECDBBFCQ6ukxASeP0DJFFjC9p7u9971043NrT5XxMqY3f9XV6vptdGB@/z7aZ@tcmDvsw3qe@C3FIybnS@5VzhYcjGCtNzRcu81yAcjVgBRJEcwFhTDUzguhFUbAg2Rk1SIOXxAqUrRZzmgExqAZr0QhU5WAZ8wMWK3n/Bw\" rel=\"noreferrer\">Try it online.</a></p>\n<p><strong>Explanation:</strong></p>\n\n<pre class=\"lang-python prettyprint-override\"><code>h          # Push the input-length (without popping)\n ½         # Integer-divide it by 2\n  )        # Increase it by 1\n   r       # Pop and push a list in the range [0,length(input)//2+1)\n    ■      # Get the cartesian product of this list, creating pairs\n_          # Duplicate this list of pairs\n @         # Triple swap input,pairs,pairs -&gt; pairs,input,pairs\n  m        # Map over each pair,\n   Å       # using 2 characters as inner code-block:\n    ε      #  Reduce the pair by:\n     -     #   Subtracting\n      _    # Duplicate this list\n       ╙   # Pop and push the maximum (which is length(input)//2+1)\n        +  # Add it to each integer in the list\n         § # Get the inner lists of the input at those indices\n \\         # Swap so the other pairs-list is at the top again\n  m        # Map over each pair,\n   Ä       # using 1 character as inner code-block:\n    ╓      #  Pop and push the minimum of the pair\n     m     # Map over both lists:\n      §    #  Index these minima into the inner lists\n           # (after which the entire stack is output implicitly as result)\n</code></pre>\n"},{"answer_id":252090,"question_id":252082,"link":"https://codegolf.stackexchange.com/questions/252082/reconstruct-matrix-from-its-diagonals/252090#252090","body":"<h1><a href=\"https://dyalog.com\" rel=\"nofollow noreferrer\">APL(Dyalog Unicode)</a>, <s>21</s> 22 bytes <sup><a href=\"https://github.com/abrudz/SBCS\" rel=\"nofollow noreferrer\">SBCS</a></sup></h1>\n<pre><code>⊖w↑i⊖↑⌽⍨≢↑⍥-i←⍳w←≢∘⍉∘↑\n</code></pre>\n<p><a href=\"https://razetime.github.io/APLgolf/?h=e9Q31dP/UdsEAwA&amp;c=e9Q1rfxR28TMR13TgNSjnr2Pelc86lwEYvcu1c181DbhUe/mchAFFOyY8ai3E0S2TQQA&amp;f=NY47EsQwCEP7nOKVSWcJx44vlPsfYcE7adBnkODltC5ODexCoYkj6UBGD@7lM1Gghe@U5kEdt@TBQmV2VPq@jvebip0dK6FtZ8zadGPtE45/qFFfZPcP&amp;i=AwA&amp;r=tryapl&amp;l=apl-dyalog&amp;m=train&amp;n=f\" rel=\"nofollow noreferrer\">Try it on APLgolf!</a></p>\n<p><code>∘↑</code> mix the lists into a matrix, padding on the right with 0s, then…</p>\n<p> <code>∘⍉</code> transpose, then…</p>\n<p>  <code>≢</code> tally the number of rows (this gives the size of the matrix)</p>\n<p><code>w←</code> store as <code>w</code> (for <strong>w</strong>idth)</p>\n<p><code>⍳</code> generate indices from 0 to that − 1</p>\n<p><code>i←</code> store as <code>i</code> (for <strong>i</strong>ndices)</p>\n<p><code>≢</code>…<code>⍥-</code> negate the argument length and that, then:</p>\n<p> <code>↑</code> take arg-length elements from (because negative; the rear) of the indices, padding with 0s</p>\n<p>…<code>⌽⍨</code> use those numbers to rotate left (because negative; right) the rows of:</p>\n<p> <code>↑</code> the original argument lists mixed into a matrix, padded on the right with 0s</p>\n<p><code>i⊖</code> rotate the columns up by the amounts <code>i</code></p>\n<p><code>w↑</code> take the first <code>w</code> rows of that</p>\n<p><code>⊖</code> flip upside-down</p>\n"}]