[{"answer_id":252375,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/252375#252375","body":"\n<h1><a href=\"https://www.lexurgy.com/sc\" rel=\"nofollow noreferrer\">Lexurgy</a>, 30 bytes</h1>\n<pre class=\"lang-bash prettyprint-override\"><code>s:\n[]$1 ([]*)$2 []$3=&gt;$3 $2 $1\n</code></pre>\n"},{"answer_id":252370,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/252370#252370","body":"<h1><a href=\"http://golfscript.com/nibbles/index.html\" rel=\"nofollow noreferrer\">Nibbles</a>, 5 bytes (10 nibbles)</h1>\n<pre><code>:`(\\@:`)\\$\n</code></pre>\n<p>Word separator is newline character.</p>\n<pre><code>:`(\\@:`)\\$$ # (code with implicitly-added final $)\n            # implicit map over lines of input:\n:           # joined\n `(         # first character of\n   \\@       # reversed word\n            # (and save leftover of reversed word in variable $)\n            # with\n     :      # joined\n      `)    # all but first character of\n        \\$  # reversed leftover of reversed word\n            # with\n          $ # first character of leftover of reversed word\n            # (so, first character of the original word)            \n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/tNC2d.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/tNC2d.png\" alt=\"enter image description here\" /></a></p>\n"},{"answer_id":252369,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/252369#252369","body":"<h1><a href=\"https://github.com/barbuz/Husk\" rel=\"nofollow noreferrer\">Husk</a>, 10 bytes</h1>\n<pre><code>wm§:→oṙ1hw\n</code></pre>\n<p><a href=\"https://tio.run/##yygtzv7/vzz30HKrR22T8h/unGmYUf7////i8sQChZKMVIW0zKLiEoXEvBSFnEQgIye1pCS1qFghP00hNTE5Q6E8vygFAA\" rel=\"nofollow noreferrer\" title=\"Husk – Try It Online\">Try it online!</a></p>\n<h3>Explanation</h3>\n<pre><code>wm§:→oṙ1hw\n m       w  map over each word\n  §:        concatenate the\n    →       last char\n     o  h   and the rest\n      ṙ1    rotated\nw           join on spaces\n</code></pre>\n"},{"answer_id":236101,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/236101#236101","body":"<h1>Zsh, 39 bytes</h1>\n<p>Major bug fixed. <a href=\"https://tio.run/##HYzBboMwEETv/oqRipT2kAM9BlT1P0oOW7PGSMYma1cQAt9ODZfVvpmnWaLd40Tj@8drN0EwV3VdF/PPtbwXr/lW3oq3@fq55aS8r@vZ7ZsyWVfAKL1PBpcvXKpjBMX3mgRN49GgYm2D2pQyOLtkGaaXmEC@haP8OE6JJSIYMGmLKUibdcvOhQPcQYmzqSlyzDBK6ISGofcdxr9lcRzPOR1aRhecyU7vQeiE2WNgasOUsyc9IaRZk2Si33we@z8\" rel=\"nofollow noreferrer\">Try it Online</a>.</p>\n<pre class=\"lang-bash prettyprint-override\"><code>for x;&lt;&lt;&lt;$x[-1]${x:1:$#x-2}$x[1]||&lt;&lt;&lt;$x\n</code></pre>\n<p><s><sub><a href=\"https://ato.pxeger.com/run?1=JY9BasMwEEX3OsUndUmy8CK7Qo3Te7RZDPLIMsiSkRRM7Pgk2RhKe42ueojeprLNLGbe5_FhHp9D0PN36Kk7HL-uUeUvP8p52NeiKDL7np8u2ZiN9uk8PZ-nFJwum_X3qw7HUbDUDrnFLntDWZbYiaUKie6IHvsPu8cyqygmIRRWIWqGanyIIFvBUDoMx8g-wCkwSY3e-Srpmo1xC5iFIidTUuCQoPOu9tS2ja3RXYfBcFjrpKsYtTMqOY0FofbMFi1T5fqU3egGT5Il-e2Zed72Pw\" rel=\"nofollow noreferrer\">31 bytes</a></sub></s>\n  <s><sub><a href=\"https://tio.run/##HYzBboMwEETv/opRipT2wIEeU4TyH20OK7PGSGaN1q5QSPl2atBc5o2eZk1@TwvN7x@v3UWFfLVtW8l33Tyql9yaW/Um9edWluaxb8YVz7D1EbXgUt3RdR0u5nhAoT9kxfVHrjhyimYzxuEUsme4UVMGSY9ApQTOmTUhOjBZjyVqX3TPIcQDwkGZi2kpcSowaxyUpmmUAfPvugZO552NPWOIwRVnFBAGZRZMTH1cyvakJ5QsW9L9Hw\" rel=\"nofollow noreferrer\">32 bytes</a></sub></s>\n  <s><sub><a href=\"https://tio.run/##HYxBDsIwDATvecUKIQQHDpypEF8xqdNUSuPKCVQt4u3F7cXaWY@9lLiWicbz5bsGUeS78qdpmuPtdCqxD3X9uWBLxz4KrozDA8fnwW03FrD37udcwF7VyAi9lgrKLRJZSFwra4EEMPmISbQ1PXJKskHaqLKZngoXg1GlUxqGPncY38uSuOzvvLSMTlIwp88gdMqcMTC1Mlk30wwlz57UiF42/PoH\" rel=\"nofollow noreferrer\">bugged</a></sub></s></p>\n"},{"answer_id":252296,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/252296#252296","body":"<h1><a href=\"https://github.com/ETHproductions/japt\" rel=\"nofollow noreferrer\">Japt</a>, 2 <a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\" rel=\"nofollow noreferrer\">bytes</a></h1>\n<pre><code>àV\n</code></pre>\n<p><a href=\"https://petershaggynoble.github.io/Japt-Interpreter/?v=1.4.6&amp;code=4FY&amp;input=NSAy\" rel=\"nofollow noreferrer\">Try it out here</a></p>\n"},{"answer_id":252282,"question_id":252189,"link":"https://codegolf.stackexchange.com/questions/252189/carryless-factors/252282#252282","body":"<h1><a href=\"https://docs.python.org/2/\" rel=\"nofollow noreferrer\">Python 2</a>, 78 bytes</h1>\n\n<pre class=\"lang-python prettyprint-override\"><code>N=k=input()\nwhile k:\n k-=1;i=n=N\n while i:i-=1;n=min(k&lt;&lt;i^n,n)\n if n&lt;1:print k\n</code></pre>\n<p><a href=\"https://tio.run/##JYzBCsIwEAXv7yuWnlpQaGKiGLO/0E/wIpEu0TVIRP36SO1pYAamfOv8UNves9wSmZA@6dJ1XZs4s2h51X7A2nIA5S2bk7DyBFqtBFmc8l20zzHKWTc6gORKGk0oT9FKuf2JZWzh4LGH9dgd4SzMOMIf3A8\" rel=\"nofollow noreferrer\" title=\"Python 2 – Try It Online\">Try it online!</a></p>\n<p>Prints the factors backwards, excluding the input itself.</p>\n<p>The idea is to test divisibility using a carryless analogue of long-division to compute the remainder and see if it's zero.</p>\n<p>The number <code>k</code> is a factor of <code>n</code> if we can xor some collection of leftward bit-shifts of <code>k</code> onto <code>n</code> to get zero. It suffices to use the greedy strategy of making <code>n</code> as small as possible at each step, which is achieved by clearing the leftmost bit of <code>n</code> (without introducing larger-valued bits) by taking the bit-shift of <code>k</code> whose leftmost bit aligns with that of <code>n</code>.</p>\n<p>The code achieves this by taking the bit-shifts <code>k&lt;&lt;i</code> for some large <code>i</code> counting down to <code>0</code>, and checking if xor-ing this value onto <code>n</code> makes <code>n</code> smaller.</p>\n<p>An alternative approach to repeatedly try to clear the rightmost bit of <code>n</code> while shifting <code>k</code> leftward.</p>\n<p><strong><a href=\"https://docs.python.org/2/\" rel=\"nofollow noreferrer\">Python 2</a>, 79 bytes</strong></p>\n\n<pre class=\"lang-python prettyprint-override\"><code>N=k=input()\nwhile k:\n n=N;c=k=k-1;exec&quot;n^=c*(n&amp;c&amp;-c&gt;0);c*=2;&quot;*N\n if n&lt;1:print k\n</code></pre>\n<p><a href=\"https://tio.run/##JYxBCsIwFAX37xQhi9IGCk1sBRPjEXIEN59IQ@QbJKKePmpdzWKGKe@63ti055quUWgbX5GklC347BOXR@0H/F22EOyDo6/Jo3ZbyWdPqueOupFO0@BIeeOkChDpIviobbknriK3jfidDWYs2MMs2B0wG@hp@gA\" rel=\"nofollow noreferrer\" title=\"Python 2 – Try It Online\">Try it online!</a></p>\n"},{"answer_id":252280,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/252280#252280","body":"<h1><a href=\"https://docs.python.org/2/\" rel=\"nofollow noreferrer\">Python 2</a>, 39 bytes</h1>\n\n<pre class=\"lang-python prettyprint-override\"><code>n,k=input()\nB=2&lt;&lt;n\nprint(B+1)**n/B**k%B\n</code></pre>\n<p><a href=\"https://tio.run/##K6gsycjPM/pfnpGZk6pgaJVakZqspKT0P08n2zYzr6C0REOTy8nWyMYmj6ugKDOvRMNJ21BTSytP30lLK1vV6T9IraGBjiEXkDDiMtAx4DLVMQYA\" rel=\"nofollow noreferrer\" title=\"Python 2 – Try It Online\">Try it online!</a></p>\n<p>A full program, as the challenge asks for. The method is explained in <a href=\"https://codegolf.stackexchange.com/a/169115/20260\">this tip</a>.</p>\n"},{"answer_id":252277,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/252277#252277","body":"\n<h1><a href=\"https://go.dev\" rel=\"nofollow noreferrer\">Go</a>, 58 bytes</h1>\n<pre class=\"lang-go prettyprint-override\"><code>func b(n,k int)int{if k&lt;1{return 1}\nreturn b(n-1,k-1)*n/k}\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=LY47DoMwDIZncgqLiZTQNlvF4w7dOwEiyEkxKAoT4iRdUKUeokfpbRoekl_6bP2_X--2X75DWZuybaArkRh2Q28dhKpz4Wd0Krn9UjVSDVVEwgCS4z4nVGByOdnGjZZAzuyY_FUihUkkP9HFzIfCY1NY9SMOEwtUbwHTQmaYF_KaYRx7uFG9Up0XmOkdBv6R8916zydFKLSo1sq5X83Mx2GxLHv_Aw\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n<h3>Alternative using <code>math.Gamma()</code>, 82 bytes</h3>\n<pre class=\"lang-go prettyprint-override\"><code>import.&quot;math&quot;\nfunc b(n,k float64)float64{g:=Gamma\nreturn g(n+1)/(g(k+1)*g(n-k+1))}\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=LY5NCoMwEIXXzSmCq6T-VKGU4s-629IbRDFpokkkxJV4km6k0EP0KL1NExWGeTPzwXvzejO9fAfSdIS1UBKuAJeDNhYGVNrgM1oaX3-P7ZYEkthnAOioGlgjFXWQ9prYyxnvOrG8uhEpCTCtHY2CDKkwwyfEUOf06NbYD3jencnq5XMRhhM4UG0gz6ssSQteVlnqNQwdWInYiCgrXojtfHBvJnfDle0V4pGIat8xdmgGrvagZdn0Dw\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n"},{"answer_id":252225,"question_id":252189,"link":"https://codegolf.stackexchange.com/questions/252189/carryless-factors/252225#252225","body":"<h1><a href=\"https://www.ruby-lang.org/\" rel=\"nofollow noreferrer\">Ruby</a>, <s>70</s> 68 bytes</h1>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>-&gt;n{(k=0..n).select{|b|k.any?{|a|r=0\nk.map{|x|r^=a*(b&amp;2**x)}\nr==n}}}\n</code></pre>\n<p><a href=\"https://tio.run/##VY7BboMwEETv/opRDpWNXGQvXsAH2g@JUgkiolS0KKKpRAR8O13UC/FtxzPzZvhtHuulWl/f@kl3lUvT3qQ/7Vd7vk9zM3dp3T/ep7meh8qpLv2ub9M8zsNHVSe6eaEkGc2ihqrql2VZj2SDZZtbYptFG8h65ywX4ZS29fm6JRVuw2d/x2gvx/FkD@qgllUR/p/2BpqMCruboINRvFMyaDYqf/KIlhtFvO8RUxb3MYb3oAidRWHQPl/AB5AXluBl9e5LdAY7uZyTIUV4wjJyCUd4t5VLiRdKCSJQsbEyBxkRGCGCA7hEUaLMEB1iKSlx57mQHUhMVBZiFJZghOWCDPkD\" rel=\"nofollow noreferrer\" title=\"Ruby – Try It Online\">Try it online!</a></p>\n<ul>\n<li>Saved 2 thanks to @G B reminding me that <em>f=</em> doesn't need to be counted.</li>\n</ul>\n<p>Very inefficient lambda function.</p>\n<p>Uses the range (0..input) three times:\ncheck each number up to input, try carryless multiply it for each and bitmask 2nd operand by 2^ each.</p>\n"},{"answer_id":252198,"question_id":252189,"link":"https://codegolf.stackexchange.com/questions/252189/carryless-factors/252198#252198","body":"<h1><a href=\"https://pari.math.u-bordeaux.fr\" rel=\"nofollow noreferrer\">PARI/GP</a>, 55 bytes</h1>\n<pre><code>n-&gt;[eval(lift(d))|d&lt;-divisors(Mod(Pol(binary(n)),x=2))]\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=m728ILEoMz69YMHiNAXbpaUlaboWN83zdO2iU8sSczRyMtNKNFI0NWtSbHRTMssyi_OLijV881M0AvJzNJIy8xKLKjXyNDV1KmyNNDVjodqDEgsKcoDiCrp2CgVFmXklQKYSiKOkkAZWrRBtpKNgoqNgqqNgpqNgBKSMLYECQEFDAwOgsDlIzsAEyLQwsTAzMYjVhJi8YAGEBgA\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n<p>This is just factoring in the polynomial ring <span class=\"math-container\">\\$\\mathbb{F}_2[x]\\$</span>.</p>\n<hr />\n<h2><a href=\"https://pari.math.u-bordeaux.fr\" rel=\"nofollow noreferrer\">PARI/GP</a>, 56 bytes</h2>\n<pre><code>n-&gt;[d|d&lt;-[1..n],!(g(n)%g(d))]\ng(n)=Mod(Pol(binary(n)),2)\n</code></pre>\n<p><a href=\"https://ato.pxeger.com/run?1=m728ILEoMz69YGW0km6xmUmuUuziNAXbpaUlaboWNy3ydO2iU2pSbHSjDfX08mJ1FDXSNfI0VdM1UjQ1Y7lAbFvf_BSNgPwcjaTMvMSiSqCIpo6RJlR_UGJBQQ5QTEHXTqGgKDOvBMhUAnGUFNLAKhWijXQUTHQUTHUUzHQUjICUsSVQAChoaGAAFDYHyRmYAJkWJhZmJgaxUJMXLIDQAA\" rel=\"nofollow noreferrer\">Attempt This Online!</a></p>\n"},{"answer_id":252233,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/252233#252233","body":"<h1><a href=\"https://www.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust</a>, 53 bytes</h1>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn f(n:i32,k:i32)-&gt;i32{if k&lt;1{1}else{f(n-1,k-1)*n/k}}\n</code></pre>\n<p>This is essentially the same as the Python code in some of the previous answers, and computes the binomial coefficient through recursion.</p>\n<p><a href=\"https://tio.run/##FcqxCoAgEADQub7CnLxQwqKlon9pSBDtCK3puG@3XN700puf4lBch0cFgtrmTh6fiJ2SxFILp2Y9Aqwt1@YULn4adaiC2X/JOxE2S5bPmE/6h7E6GAs9DoG5lA8\" rel=\"nofollow noreferrer\" title=\"Rust – Try It Online\">Try it online!</a></p>\n"},{"answer_id":252218,"question_id":252189,"link":"https://codegolf.stackexchange.com/questions/252189/carryless-factors/252218#252218","body":"<h1>Java 8, <s>120</s> <s>119</s> 117 bytes</h1>\n\n<pre class=\"lang-java prettyprint-override\"><code>n-&gt;{for(int x=n,y,r,i;x&gt;0;)for(y=x--;--y&gt;0;System.out.print(r==n?x+&quot; &quot;+y+&quot; &quot;:&quot;&quot;))for(r=i=0;i&lt;32;)r^=(y&gt;&gt;i&amp;1)*x&lt;&lt;i++;}\n</code></pre>\n<p>-2 bytes thanks to <em>@ceilingcat</em>.</p>\n<p>Outputs the results space-delimited to STDOUT in pairs, excluding <code>1</code>/<code>n</code> (to save a byte). May contain duplicates if a pair of the same integer XOR-multiplies into the input (e.g. <code>n=4</code>).<br />\nLimited to <code>n=2147483647</code>, but could be raised to <code>n=9223372036854775807</code> by changing <code>int</code>/<code>32</code> to <code>long</code>/<code>64</code> (although already times out for test case <code>n=848640</code> anyway, tbh..)</p>\n<p><a href=\"https://tio.run/##ZZBBboMwEEX3OcXIiwoXGzkktCrG9ATNJssolVxCKqfERIakWIizU5vSLlovRprvP6M3/yRvkp4OH2NRyaaBF6l0vwBQui3NURYlbHwLcKvVAYrA6aAxd9KwcKVpZasK2IAGMWqa98faTJ5OaGKJIYp3OePYy1Z0lHJKrRO2tmnLc1Rf2@hinD8wQujnLkSAQutrihCepoxQgnGVrWKOzasIbJ6ruyW@77JMhSEfRu45Lte3ynHMOBPr2V0SbFu3/X23l/j7ih88lery0x@52/cxWZOEPJA4Iasnso7JkjGSPDqRrdkwDwL8Q1YhSgFNWfinI5fOb/fXXelg/hum7IbxCw\" rel=\"nofollow noreferrer\">Try it online.</a></p>\n<p><strong>Explanation:</strong></p>\n<pre class=\"lang-java prettyprint-override\"><code>n-&gt;{                         // Method with integer parameter and no return-type\n  for(int x=n,y,r,i;         //  Temp-integers\n      x&gt;0;)                  //  Loop `x` in the range [n,0):\n    for(y=x--;--y&gt;0          //   Inner loop `y` in the range [x,0):\n        ;                    //     After every iteration:\n         System.out.print(   //      Print:\n          r==n?              //       If `r` is equal to input `n`:\n           x+&quot; &quot;+y+&quot; &quot;       //        Print `x` and `y` with space delimiters\n          :                  //       Else:\n           &quot;&quot;))              //        Print nothing instead\n      for(r=i=0;             //    Reset `r` and `i` both to 0\n          i&lt;32;)             //    Inner loop `i` in the range [0,32):\n        r^=                  //     Bitwise-XOR `r` by:\n           (y&gt;&gt;i             //      Bitwise right-shift `y` by `i` positions\n                &amp;1)          //      Modulo-2 that (using Bitwise-AND by 1, so we won't\n                             //                     need parenthesis)\n                   *x        //      Multiply that by `x`\n                     &lt;&lt;i     //      Bitwise left-shift that by `i` positions\n                        ++;} //      And increase `i` by 1 afterwards with `i++`\n</code></pre>\n"},{"answer_id":252203,"question_id":252189,"link":"https://codegolf.stackexchange.com/questions/252189/carryless-factors/252203#252203","body":"<h1><a href=\"https://www.wolfram.com/wolframscript/\" rel=\"nofollow noreferrer\">Wolfram Language (Mathematica)</a>, <s>54</s> 53 bytes</h1>\n<pre><code>BitXor@@(#~NumberExpand~2#2)&amp;~Array~{#,#}~Position~#&amp;\n</code></pre>\n<p><a href=\"https://tio.run/##y00syUjNTSzJTE78n2b73ymzJCK/yMFBQ7nOrzQ3KbXItaIgMS@lzkjZSFOtzrGoKLGyrlpZR7m2LiC/OLMkMz@vTlntf0BRZl5JtLKuXZqDcqxaXXByYl5dNZeRDpeJDpepDpeZDpcRkDK25Kr9DwA\" rel=\"nofollow noreferrer\" title=\"Wolfram Language (Mathematica) – Try It Online\">Try it online!</a></p>\n<p>Returns all pairs that xor-multiply to the input.</p>\n<p>Loosely based on <a href=\"https://codegolf.stackexchange.com/a/50307\">alephalpha's answer</a> to the multiplication question. <a href=\"https://reference.wolfram.com/language/ref/NumberExpand.html\" rel=\"nofollow noreferrer\"><code>NumberExpand</code></a> was introduced in 2016 with version 11.0.</p>\n"},{"answer_id":252213,"question_id":252189,"link":"https://codegolf.stackexchange.com/questions/252189/carryless-factors/252213#252213","body":"<h1><a href=\"https://github.com/Vyxal/Vyxal\" rel=\"nofollow noreferrer\">Vyxal</a>, 18 bytes</h1>\n<pre><code>'£?ƛ0$b(dn¥*꘍)?=;a\n</code></pre>\n<p><a href=\"https://vyxal.pythonanywhere.com/#WyIiLCIiLCInwqM/xpswJGIoZG7CpSrqmI0pPz07YSIsIiIsIjM5Il0=\" rel=\"nofollow noreferrer\">Try it Online!</a></p>\n<p>Port of 05AB1E.</p>\n"},{"answer_id":252210,"question_id":252189,"link":"https://codegolf.stackexchange.com/questions/252189/carryless-factors/252210#252210","body":"<h1><a href=\"https://github.com/somebody1234/Charcoal\" rel=\"nofollow noreferrer\">Charcoal</a>, 48 bytes</h1>\n<pre><code>ＮθＦθ«≔θηＦ⮌×⊕ιＸ²…·⁰⁻Ｌ↨θ²Ｌ↨⊕ι²≔⌊⟦η⁻｜ηκ＆ηκ⟧η¿¬η⟦Ｉ⊕ι\n</code></pre>\n<p><a href=\"https://tio.run/##XY8/iwJBDMVr91NMmYEVxKvESq0WPE/ETq6YW@NOcCd7zp@1ED/7XDhXEFOF915@SWprfN2ZNueKf1PcJPeDHi56Xpw6r6RRt2K0CIEahkuprBijf2eHPfqAsCeHASquPTrkiEcgXaptdxXMtFRitClQjzvDDcKkVJ/EKcAauYkWlkYQwp1qGXrV3oESeJQajhEMueTgYJ/IJcUrBfzyINJZZgZhwceHor/18AGdFGy6CFZ4W08c4bAyIb5tlfy8uOf8Mcvjvv0D\" rel=\"nofollow noreferrer\" title=\"Charcoal – Try It Online\">Try it online!</a> Link is to verbose version of code. Outputs includes <code>1</code> and <code>n</code> as divisors. Explanation:</p>\n<pre><code>Ｎθ\n</code></pre>\n<p>Input <code>n</code>.</p>\n<pre><code>Ｆθ«\n</code></pre>\n<p>Loop up to <code>n</code>. (The loop variable is incremented whenever it is used effectively looping the trial factor from <code>1</code> to <code>n</code> inclusive.)</p>\n<pre><code>≔θη\n</code></pre>\n<p>Start with <code>n</code>.</p>\n<pre><code>Ｆ⮌×⊕ιＸ²…·⁰⁻Ｌ↨θ²Ｌ↨⊕ι²\n</code></pre>\n<p>Take all possible shifts of the trial factor up to and including the same length as <code>n</code>, highest first.</p>\n<pre><code>≔⌊⟦η⁻｜ηκ＆ηκ⟧η\n</code></pre>\n<p>Perform trial division by updating the running total with the XOR of the running total with the current shifted trial factor if this reduces it.</p>\n<pre><code>¿¬η⟦Ｉ⊕ι\n</code></pre>\n<p>If there was no remainder then output the trial factor.</p>\n"},{"answer_id":252209,"question_id":252189,"link":"https://codegolf.stackexchange.com/questions/252189/carryless-factors/252209#252209","body":"<h1><a href=\"https://github.com/Adriandmen/05AB1E/wiki/Commands\" rel=\"nofollow noreferrer\">05AB1E</a>, 18 <a href=\"https://github.com/Adriandmen/05AB1E/wiki/Codepage\" rel=\"nofollow noreferrer\">bytes</a></h1>\n<pre><code>LʒULε0sbv·yX*^}Q}à\n</code></pre>\n<p><a href=\"https://tio.run/##yy9OTMpM/f/f59SkUJ9zWw2Kk8oOba@M0IqrDaw9vOD/f2NLAA\" rel=\"nofollow noreferrer\">Try it online</a> or <a href=\"https://tio.run/##AUoAtf9vc2FiaWX/dnk/IiDihpIgIj95wqn/TMqSVcKuTM61MHNidsK3eVgqXn3CrlF9w6D/fSz/WzIsNCw1LDYsMjUsMzksNDIsMTAwXQ\" rel=\"nofollow noreferrer\">verify (almost) all test cases</a> (the largest two test cases are omitted because they'll time out).</p>\n<p><strong>Explanation:</strong></p>\n\n<pre class=\"lang-python prettyprint-override\"><code>L              # Push a list in the range [1, (implicit) input]\n ʒ             # Filter it by:\n  U            #  Pop and put the current integer in variable `X`\n  L            #  Push a list in the range [1, (implicit) input] again\n   ε           #  Map it to:\n    0          #   Push a 0\n     s         #   Swap so the current map-integer is at the top\n      b        #   Convert it to a binary string\n       v       #   Loop over each bit `y` of this string:\n        ·      #    Double the current integer\n         y     #    Push bit `y`\n          X*   #    Multiply it by integer `X`\n            ^  #    Bitwise-XOR the two integers together\n       }Q      #   After the loop: check if it's equal to the (implicit) input\n   }à          #  After the map: max to check if any was turthy\n               # (after which the filtered list is output implicitly as result)\n</code></pre>\n"},{"answer_id":252190,"question_id":252189,"link":"https://codegolf.stackexchange.com/questions/252189/carryless-factors/252190#252190","body":"<h1><a href=\"https://v8.dev/\" rel=\"nofollow noreferrer\">JavaScript (V8)</a>, 69 bytes</h1>\n<p><em>-4 by using a single loop as in <a href=\"https://codegolf.stackexchange.com/a/252192/58563\">@jdt's C port</a></em><br />\n<em>-1 thanks to another suggestion from @jdt</em></p>\n<p>Prints all carryless factors, excluding 1 and the input itself.</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>n=&gt;{for(p=n*n;--p;g(p/n|0,q=p%n)^n||print(q))g=p=&gt;p&amp;&amp;p%2*q^g(p&gt;&gt;1)*2}\n</code></pre>\n<p><a href=\"https://tio.run/##JY3NDoIwEITvPsVegBaLQsW/NNubV1/ASEJIQDysCxIuwLPXGi4zk282O@9yLL9V3/KQjBdXoyO0U/3pBSPFZJKETSN4T3OqOuSAZEHzzH1Lg@ikbJDRchhyoOOu8IfWZjLWizMPrSBXcFRwUqC9Ha4eeJilqcfn/LnZ@ZlbWb0EAVqYYP0a3QEhgi2QNFCLv66FD4t0Pw\" rel=\"nofollow noreferrer\" title=\"JavaScript (V8) – Try It Online\">Try it online!</a></p>\n<p>Or <strong>68 bytes</strong> for a much slower version relying on arithmetic underflow:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>n=&gt;{for(p=n*n;--p;g(p/n,q=p%n)^n||print(q))g=p=&gt;p&amp;&amp;(p&amp;1)*q^g(p/2)*2}\n</code></pre>\n<p><a href=\"https://tio.run/##JY3NDoIwEITvPsVehBaLQsW/NMvNqy9gJGlIQDysCxIuwLPXEi4zk282Ox872F/ZNdzHw9VV6Ajzsfp2gpEiMnHMphZ8INUib0kWNE3cNdSLVsoaGXMOAsFBKqO2WA61jPTszFMryBScFJwVaG/Hmwcepkni8SV7bfZ@5W7LtyDAHEZY34YPQAhhByQNVGLRtfBhlu4P\" rel=\"nofollow noreferrer\" title=\"JavaScript (V8) – Try It Online\">Try it online!</a></p>\n<h3>Commented</h3>\n<pre class=\"lang-javascript prettyprint-override\"><code>n =&gt; {            // n = input\n  for(            // loop:\n    p = n * n;    //   start with p = n²\n    --p;          //   decrement p until p = 0\n    g(            //   invoke g with:\n      p / n | 0,  //     floor(p / n)\n      q = p % n   //     q = p mod n\n    )             //   end of call\n    ^ n           //   XOR the result with n\n    || print(q)   //   print q if the result of g is equal to n\n  )               //\n    g = p =&gt;      //   g is a recursive function taking p:\n      p &amp;&amp;        //     stop if p = 0\n      p % 2 * q ^ //     XOR the result with q if the LSB of p is set\n      g(p &gt;&gt; 1)   //     recursive call with p right-shifted by 1\n      * 2         //     double the result to account for the shift\n}                 //\n</code></pre>\n"},{"answer_id":252200,"question_id":252189,"link":"https://codegolf.stackexchange.com/questions/252189/carryless-factors/252200#252200","body":"<h1><a href=\"https://github.com/DennisMitchell/jelly\" rel=\"noreferrer\">Jelly</a>, <s> 12 </s> 11 <a href=\"https://github.com/DennisMitchell/jelly\" rel=\"noreferrer\">bytes</a></h1>\n<pre><code>B€æcþ`Ḃċ€BT\n</code></pre>\n<p>A monadic Link that accepts an integer and yields a list of integers.</p>\n<p><strong><a href=\"https://tio.run/##y0rNyan8/9/pUdOaw8uSD@9LeLij6Ug3kOcU8v//f2NLAA\" rel=\"noreferrer\" title=\"Jelly – Try It Online\">Try it online!</a></strong> Or see the <a href=\"https://tio.run/##y0rNyan8/9/pUdOaw8uSD@9LeLij6Ug3kOcU8l/ncPvRSQ93zlDx1oz8/99Ix0THVMdMx8hUx9hSx8RIx9DAAAA\" rel=\"noreferrer\" title=\"Jelly – Try It Online\">test-suite</a> (reduced set as code is slow).</p>\n<h3>How?</h3>\n<pre><code>B€æcþ`Ḃċ€BT - Link: integer, n\n €          - for each i in [1,n]:\nB           -   convert to binary\n     `      - use as both arguments of:\n    þ       -   table with:\n  æc        -     convolution\n      Ḃ     - modulo 2 (vectorises)\n         B  - convert n to binary\n        €   - for each row in the table:\n       ċ    -   count occurrences (of n in binary)\n          T - truthy indices\n</code></pre>\n"},{"answer_id":252192,"question_id":252189,"link":"https://codegolf.stackexchange.com/questions/252189/carryless-factors/252192#252192","body":"<h1><a href=\"https://gcc.gnu.org/\" rel=\"nofollow noreferrer\">C (gcc)</a>, <s>89</s> 86 bytes</h1>\n\n<pre class=\"lang-c prettyprint-override\"><code>i;r(k,p){k=k?k%2*p^r(k/2,p*2):0;}f(n){for(i=n*n;--i;)r(i/n,i%n)^n||printf(&quot;%d &quot;,i%n);}\n</code></pre>\n<p><a href=\"https://tio.run/##TY5dDsIgEITfe4pNkyZQaUT8i5LGG3gBo4mp0pAqkhbjQ@Xq4lqtygvsN7PMFFlZFCFoWZOKWdpWebWqEpHaHYKhYDYVdMmlV8TQVl1qonOTGpllWlIchobpxNCdud9trY1TJE4OEHdQ@oAEznttCI3aCPC8gDs2brOFHFoQDCYMpgxmDARe4wUChCPOEc9R4@Blt4nZQLp13OTy/Yvb4mMwoJ3jndCnrNHWe75C3/ElYs8lNoU1/emK/E/26hoSxx/iIx8ehTrtyyZktyc\" rel=\"nofollow noreferrer\" title=\"C (gcc) – Try It Online\">Try it online!</a></p>\n<p>Port of Arnauld's answer</p>\n<p>-2 bytes thanks to AZTECCO</p>\n<p>-2 bytes thanks to Arnauld</p>\n"},{"answer_id":248343,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/248343#248343","body":"<h1><a href=\"https://github.com/tomtheisen/stax\" rel=\"nofollow noreferrer\">Stax</a>, 6 <a href=\"https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax\" rel=\"nofollow noreferrer\">bytes</a></h1>\n<pre><code>╡à⌂≤¬)\n</code></pre>\n<p><a href=\"https://staxlang.xyz/#p=b5857ff3aa29&amp;i=swap%0Athe%0Afirst%0Aand%0Alast%0Aletters%0Aof%0Aeach%0Aword%0Ain%0Aa%0Agreen%0Ameadow&amp;a=1\" rel=\"nofollow noreferrer\">Run and debug it</a></p>\n<p>Uses newline for the word delimiter</p>\n"},{"answer_id":247990,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/247990#247990","body":"<h1><a href=\"https://github.com/Vyxal/Vyxal\" rel=\"nofollow noreferrer\">Vyxal</a>, 7 bytes</h1>\n<pre><code>⌈ƛḣǔp;Ṅ\n</code></pre>\n<p><a href=\"https://vyxal.pythonanywhere.com/#WyIiLCIiLCLijIjGm+G4o8eUcDvhuYQiLCIiLCJTd2FwIHRoZSBmaXJzdCBhbmQgbGFzdCBsZXR0ZXJzIG9mIGVhY2ggd29yZCJd\" rel=\"nofollow noreferrer\">Try it Online!</a></p>\n<pre><code>⌈     Ṅ # To the words split on spaces...\n ƛ   ;  # Over each\n  ḣ     # Take the first character and the rest\n   ǔ    # Rotate the rest\n    p   # Append the first char\n</code></pre>\n"},{"answer_id":186083,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/186083#186083","body":"<h1>x86-16 machine code, IBM PC DOS, <del>39</del> <del>38</del> 32 bytes</h1>\n<pre><code>$ xxd pwas.com\n00000000: d1ee ac8a c8ac 8bd6 8bfe f2ae 574f 4f8a  ............WOO.\n00000010: 25a4 4e88 245e 41e2 efb8 2409 aacd 21c3  %.N.$^A...$...!.\n</code></pre>\n<p>Unassembled:</p>\n<pre><code>D1 EE       SHR  SI, 1              ; DOS PSP (80H) for command line input \nAC          LODSB                   ; get input length, SI at beginning \n8A C8       MOV  CL, AL             ; input length in CX \nAC          LODSB                   ; load a space (word delimiter) into AL \n8B D6       MOV  DX, SI             ; save pointer for later output \n        WORD_LOOP: \n8B FE       MOV  DI, SI             ; start DI at beginning \nF2 AE       REPNZ SCASB             ; search for next word delimiter \n57          PUSH DI                 ; save beginning of next word \n4F          DEC  DI                 ; DI will now point to the byte after the space \n4F          DEC  DI                 ;  so it's necessary to back up two chars \n8A 25       MOV  AH, BYTE PTR[DI]   ; move last letter to AH \nA4          MOVSB                   ; move first letter to last position \n4E          DEC  SI                 ; offset MOVSB incrementing SI \n88 24       MOV  BYTE PTR[SI], AH   ; move last letter to first position \n5E          POP  SI                 ; SI to beginning of next word \n41          INC  CX                 ; offset LOOP decrementing CX \nE2 EF       LOOP WORD_LOOP          ; loop if not end of input string \nB8 0924     MOV  AX, 0924H          ; AH = 9, AL = '$' \nAA          STOSB                   ; write DOS string delimiter to end \nCD 21       INT  21H                ; write to console \nC3          RET                     ; return to DOS\n</code></pre>\n<p>Standalone PC DOS executable.  Input via command line, output to console.</p>\n<p><a href=\"https://i.stack.imgur.com/fxyWa.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/fxyWa.png\" alt=\"enter image description here\" /></a></p>\n"},{"answer_id":236099,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/236099#236099","body":"<h1><a href=\"https://github.com/Vyxal/Vyxal\" rel=\"nofollow noreferrer\">Vyxal</a> <code>S</code>, 7 bytes</h1>\n<pre><code>⌈ƛḣṫ∇p+\n</code></pre>\n<p><a href=\"https://lyxal.pythonanywhere.com?flags=S&amp;code=%E2%8C%88%C6%9B%E1%B8%A3%E1%B9%AB%E2%88%87p%2B&amp;inputs=hello%20world&amp;header=&amp;footer=\" rel=\"nofollow noreferrer\">Try it Online!</a></p>\n<p>Two can play at the 7 bytes with S flag game.</p>\n<h2>Explained</h2>\n<pre><code>⌈ƛḣṫ∇p+\n⌈       # Split the input on spaces\n ƛ      # and to each item S:\n  ḣṫ    #   push S[0], S[1:-1], S[-1]\n   ∇    #  rotate the top three items to leave the stack as S[-1], S[0], S[1:-1]\n    p   #  prepend the middle of S to the head of S\n     +  #  and append that to the tail of S\n        # the -S flag joins the TOS on spaces\n</code></pre>\n"},{"answer_id":236098,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/236098#236098","body":"<h1><a href=\"https://factorcode.org/\" rel=\"nofollow noreferrer\">Factor</a>, 60 bytes</h1>\n<pre><code>[ &quot; &quot;split [ 1 cut 1 short cut* spin 3append ] map &quot; &quot;join ]\n</code></pre>\n<p>This doesn't run on TIO (Try it Online) because <code>spin</code> postdates build 1525, the one TIO uses. Here's a screenshot of running it in build 1889, the official 0.98 release:</p>\n<p><a href=\"https://i.stack.imgur.com/IiSaz.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/IiSaz.png\" alt=\"A screenshot of running the above code in the Factor Listener (REPL)\" /></a></p>\n<h2>Explanation</h2>\n<p>It's a quotation (anonymous function) that takes a string from the data stack as input and leaves a string on the data stack as output. Assuming <code>&quot;in a green meadow&quot;</code> is on top of the data stack when this quotation is called...</p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th style=\"text-align: center;\">Snippet</th>\n<th>Comment</th>\n<th>Data stack (the bottom is the top)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\"><pre>&quot; &quot;split</pre></td>\n<td>Split a string into a sequence of space-delimited strings</td>\n<td><pre><code>{ &quot;in&quot; &quot;a&quot; &quot;green&quot; &quot;meadow&quot; }</code></pre></td>\n</tr>\n<tr>\n<td style=\"text-align: center;\"><pre>[ ... ] map</pre></td>\n<td>Apply a quotation to each element of a sequence, collecting the results in a new sequence of the same length</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align: center;\"></td>\n<td>Inside the quotation during the first iteration of <code>map</code> now...</td>\n<td><pre><code>&quot;in&quot;</code></pre></td>\n</tr>\n<tr>\n<td style=\"text-align: center;\"><pre>1 cut</pre></td>\n<td>Split a string in two at index 1</td>\n<td><pre><code>&quot;i&quot;<br>&quot;n&quot;</code></pre></td>\n</tr>\n<tr>\n<td style=\"text-align: center;\"><pre>1 short</pre></td>\n<td>The minimum of 1 and the length of the sequence on top of the stack — prevents <code>cut*</code> from trying to cut at an invalid index</td>\n<td><pre><code>&quot;i&quot;<br>&quot;n&quot;<br>1</code></pre></td>\n</tr>\n<tr>\n<td style=\"text-align: center;\"><pre>cut*</pre></td>\n<td>Like <code>cut</code>, but works from the end of the sequence; not the start</td>\n<td><pre><code>&quot;i&quot;<br>&quot;&quot;<br>&quot;n&quot;</code></pre></td>\n</tr>\n<tr>\n<td style=\"text-align: center;\"><pre>spin</pre></td>\n<td>Swap the object on top of the data stack with the third object from the top of the data stack</td>\n<td><pre><code>&quot;n&quot;<br>&quot;&quot;<br>&quot;i&quot;</code></pre></td>\n</tr>\n<tr>\n<td style=\"text-align: center;\"><pre>3append</pre></td>\n<td>Append three sequences</td>\n<td><pre><code>&quot;ni&quot;</code></pre></td>\n</tr>\n<tr>\n<td style=\"text-align: center;\"></td>\n<td>And so forth...</td>\n<td><pre><code>{ &quot;ni&quot; &quot;a&quot; &quot;nreeg&quot; &quot;weadom&quot; }</code></pre></td>\n</tr>\n<tr>\n<td style=\"text-align: center;\"><pre>&quot; &quot;join</pre></td>\n<td>Join a sequence of strings into a single string separated by a space</td>\n<td><pre><code>&quot;ni a nreeg weadom&quot;</code></pre></td>\n</tr>\n</tbody>\n</table>\n</div>"},{"answer_id":236092,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/236092#236092","body":"<h1><a href=\"https://stedolan.github.io/jq/\" rel=\"nofollow noreferrer\">jq</a>, <s>73</s> 68 bytes</h1>\n<pre><code>./&quot; &quot;|map((length&lt;2//[./&quot;&quot;|.[-1],.[1:-1][],.[0]]|add?)//.)|join(&quot; &quot;)\n</code></pre>\n<p><a href=\"https://tio.run/##JY1BboMwEEX3nGLkbkAKpukyqtI7dAssRngAR8bj2kYoKb16XYeu/tPTzP@3r/StrVvjBeQJeI0Hlkk2AsS@oCtLQ3aK8/tb07TZil229bk/yfZ8ydk@6bXvd1Tqo2oaWe031rbM31WqfuBlB9GJrpTHSNUJqK9wiP@tbEQKGzqIM8GofYiAVoHBDIZiJB@ARyAcZtjYq2ImY/iJRhWR8tWAgULhPE8el0XbCdz6eBgKR9HAimBiMxbaAsLkiSwshIq34o538DjQgP6XXdRsQ6o//R8\" rel=\"nofollow noreferrer\" title=\"jq – Try It Online\">Try it online!</a></p>\n<h2>How?</h2>\n<pre><code>  . / &quot; &quot;                             # Split on spaces\n| map(                                # For each word...\n    (\n         length&lt;2                     # If it's shorter than 2 letters, emit false\n      // [   . / &quot;&quot;                   # Otherwise, emit the word's characters\n           | .[-1], .[1:-1][], .[0]]  # ...in the order last, middle, first\n      | add?                          # Then re-join the characters into an updated word. If we don't have a list of characters, (if the original was too short), emit nothing\n    ) // .                            # If we didn't get a value, emit the word unchanged\n  )\n| join(&quot; &quot;)\n</code></pre>\n"},{"answer_id":236088,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/236088#236088","body":"<h1><a href=\"https://github.com/dloscutoff/pip\" rel=\"nofollow noreferrer\">Pip</a>, 15 bytes</h1>\n<pre><code>aR+XW{@a::a@va}\n</code></pre>\n<p>Takes the string as a command-line argument. <a href=\"https://replit.com/@dloscutoff/pip\" rel=\"nofollow noreferrer\">Try it here!</a> Or, here's a <strong>14-byte</strong> version in Pip Classic: <a href=\"https://tio.run/##K8gs@P8/MUg7Irw62CEx0aEssfb////F5YkFCiUZqQppmUXFJQqJeSkKOYlARk5qSUlqUbFCfppCokJ5flEKAA\" rel=\"nofollow noreferrer\" title=\"Pip – Try It Online\">Try it online!</a></p>\n<h3>Explanation</h3>\n<pre><code>aR+XW{@a::a@va}\na                In the command-line argument,\n R               replace all matches of\n  +XW            the regex `\\w+`\n     {        }  with the following callback function:\n      @a          Take the first character of the matched string\n          a@v     and its -1th (last) character\n        ::        and swap them\n             a    Return the modified string\n</code></pre>\n"},{"answer_id":219534,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/219534#219534","body":"<h1><a href=\"https://github.com/DennisMitchell/jelly\" rel=\"nofollow noreferrer\">Jelly</a>, 1 byte</h1>\n<pre><code>c\n</code></pre>\n<p><a href=\"https://tio.run/##y0rNyan8/z/5////pv@NAA\" rel=\"nofollow noreferrer\" title=\"Jelly – Try It Online\">Try it online!</a></p>\n<p><a href=\"https://tio.run/##y0rNyan8/z9Z/////6Y6RgA\" rel=\"nofollow noreferrer\">2 bytes</a> to take input as <code>n,k</code></p>\n"},{"answer_id":219533,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/219533#219533","body":"<h1><a href=\"https://docs.python.org/3.8/\" rel=\"nofollow noreferrer\">Python 3.8 (pre-release)</a>, 21 bytes</h1>\n\n<pre class=\"lang-python prettyprint-override\"><code>import math\nmath.comb\n</code></pre>\n<p><a href=\"https://tio.run/##K6gsycjPM7YoKPr/PzO3IL@oRCE3sSSDC0ToJefnJv0vKMrMK9GA8zVMdRSMNDX/AwA\" rel=\"nofollow noreferrer\" title=\"Python 3.8 (pre-release) – Try It Online\">Try it online!</a></p>\n"},{"answer_id":206509,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/206509#206509","body":"<h1><a href=\"https://sourceforge.net/p/cjam\" rel=\"nofollow noreferrer\">CJam</a>, 19 bytes</h1>\n<pre><code>l~\\_m!@@\\_m!@@-m!*/\n</code></pre>\n<p><a href=\"https://tio.run/##S85KzP3/P6cuJj5X0cEBQurmKmrp//9vqmAEAA\" rel=\"nofollow noreferrer\" title=\"CJam – Try It Online\">Try it online!</a></p>\n"},{"answer_id":206496,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/206496#206496","body":"<h1>Excel, 13 chars</h1>\n<pre><code>=COMBIN(A1,B1\n</code></pre>\n<p><code>A1</code> is n, <code>B1</code> is r. Surprised this wasn't restricted, honestly.</p>\n"},{"answer_id":206489,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/206489#206489","body":"<h1><a href=\"https://github.com/Adriandmen/05AB1E/wiki/Commands\" rel=\"nofollow noreferrer\">05AB1E</a>, 1 (or 5?) <a href=\"https://github.com/Adriandmen/05AB1E/wiki/Codepage\" rel=\"nofollow noreferrer\">bytes</a></h1>\n<pre><code>c\n</code></pre>\n<p>Builtins ftw ¯\\_(ツ)_/¯</p>\n<p>Takes two loose inputs, <span class=\"math-container\">\\$k\\$</span> as first and <span class=\"math-container\">\\$n\\$</span> as second.</p>\n<p><a href=\"https://tio.run/##yy9OTMpM/f8/@f9/Iy5TAA\" rel=\"nofollow noreferrer\">Try it online.</a></p>\n<p>If the <code>&quot;n,k&quot;</code> format is mandatory, it would be <strong>5 <a href=\"https://github.com/Adriandmen/05AB1E/wiki/Codepage\" rel=\"nofollow noreferrer\">bytes</a></strong> instead:</p>\n<pre><code>',¡`c\n</code></pre>\n<p><a href=\"https://tio.run/##yy9OTMpM/f9fXefQwoTk//9NdYwA\" rel=\"nofollow noreferrer\">Try it online.</a></p>\n<p>This will split the (implicit) input on the &quot;,&quot;; pop and push both values separated to the stack; and than uses the <code>a choose b</code> builtin.</p>\n"},{"answer_id":185775,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185775#185775","body":"<h1><a href=\"https://www.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust</a>, 110 bytes</h1>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>|a:&amp;str|{for b in a.split(' '){let l=b.len()-1;if l&gt;0{print!(\"{}{}\",&amp;b[l..],&amp;b[1..l])}print!(\"{} \",&amp;b[0..1])}}\n</code></pre>\n\n<p><a href=\"https://tio.run/##RU@9DoMgEN59iiuDQtISXWvsM3RvHLCiITnBAKaJyLNbdGhv@ZL7/u7s4vw@aJiE0pRByCANSg8Omn0T99x5u4XBWOhAaRDczag8LaBg4ZBh03GUyXqrajUAPsowW6X9hZIQQyTXvHsh5@2BFefYsvjn4aRLzqu0jnt9ljtKntaMVkyT0iPMy7qidCB0D2/TSxgNDoTVZwrqC2U/23EfjFbK9I4UvfkkWRb3Lw\" rel=\"nofollow noreferrer\" title=\"Rust – Try It Online\">Try it online!</a></p>\n\n<h3>A surprisingly long, but nicer solution that returns instead of printing (126 bytes):</h3>\n\n<pre class=\"lang-rust prettyprint-override\"><code>|a:&amp;str|-&gt;String{a.split(' ').flat_map(|b|{let mut q:Vec&lt;_&gt;=b.chars().collect();q.swap(0,b.len()-1);q.push(' ');q}).collect()}\n</code></pre>\n\n<p><a href=\"https://tio.run/##dY@9jsIwEIT7e4q9FGBLYB0tOXiGk5Bo0cZxQqT1T@yNkEjy7MGkuoYpR9/szMYh8dI4sNg5IWH8giwyDAlOy4THTeI47c8Xjp1rR1QpUMdiC1upGkK@WQxiqqbxHbEDQ3@8Gv17O58qpe8Yk5BKeyKjWciyV@mR@Z9dpcjkuv3h7YUh3deLZT//o@elXMeE3MzkvkUxzsUOkij@om8jWpsXQRieTzIJ0NWgfW2g9dQUUn7Kdg4Q2mhMftlg7R8rOy8v\" rel=\"nofollow noreferrer\" title=\"Rust – Try It Online\">Try it online!</a></p>\n"},{"answer_id":186185,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/186185#186185","body":"<p>If halting is not necessary:</p>\n\n<h1><a href=\"https://github.com/aheui/pyaheui\" rel=\"nofollow noreferrer\">Aheui (esotope)</a>, 174 bytes</h1>\n\n<pre><code>삭붵뱷뛰빠쇡붷뼤쎄투＠싼사쑫\nＢｙＬｅ쪼ｇｅｎ＠처쇠모코커\nＤＵＳＴ오멓＠＠＠＠푸셴쒼섣\n＠＠＠＠쇡뽀＠＠＠삳멓＠샨＠맣\n</code></pre>\n\n<p><a href=\"https://tio.run/##TY3NCoJwEMTvPoWvJmkmZIrRpVOYYRAEfRyKLpZCZgaV2gft/4l2Yx/BjKCCYdhhfssoDa1jlCW5B7wUeLri6oj3gPw1Xq4IEY295zBlCGgE5KY02UsMGxZLhpTFgBJg4VcHi/EbOi/IDzCJSczpEVVoxFAwZAw5LSLczSroq@fkRoOcpkBeKP0X73XR@0U3@3xSP64ct2FZ2o6lO4ppGi1dtjvdblNry0pLlWuWqsm61ay/AA\" rel=\"nofollow noreferrer\" title=\"Aheui (esotope) – Try It Online\">Try it online!</a>\npress 'start' butten in TIO again to halt manually.</p>\n\n<p>If halting is necessary:</p>\n\n<h1><a href=\"https://github.com/aheui/pyaheui\" rel=\"nofollow noreferrer\">Aheui (esotope)</a>, 225 bytes</h1>\n\n<pre><code>살뷕볙눠쀄삭붵뱷뛰빠쇡붷빠쎄투＠싼사쑫\nＢｙ＠＠＠＠＠야빠속＠＠＠수처쇠모오어\nＬｅｇｅｎ＠＠먷초더헤셜썰뻐푸쉰썬＠셛\nＤＵＳＴ＠＠솩뽀사뫼섁쀠우삳멓산멓\n</code></pre>\n\n<p><a href=\"https://tio.run/##TU5NTsJAGN17ih7JKzRSKglQg2HDqkxaWmNKJIIWcTGYLkBqMtpCJU5P9L1mjlAHJMHky8uXl/dnXlv9Vl2D5VTMKJtTyOF6YB@029JnQQtBe45gSbvi8Iy9KkyV5LiXYCkmmwsl31Q519T/w0we1KPozIQxvmIEnN5XiBM85dqZqtJXZXDE8Z@OVgXykKJp9ZzAf0Uk6OehmnzjTiA6NvsL7UyU3CqZKZmf4kdrKl09iTYS3hAux4sAy2j9CCY01vVlz7F7ZqfT6trGTX8waFu3htltGFdOwzJsp938BQ\" rel=\"nofollow noreferrer\" title=\"Aheui (esotope) – Try It Online\">Try it online!</a></p>\n\n<p><s>In this version, following space after input is necessary.</s> fixed. Now it is OK to not finish with space.</p>\n"},{"answer_id":186209,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/186209#186209","body":"<h1><a href=\"https://github.com/TryItOnline/brainfuck\" rel=\"nofollow noreferrer\">brainfuck</a>, <s>71 67 49</s> 47 bytes</h1>\n\n<pre><code>+[-[+&gt;&gt;]&gt;[&lt;&lt;.[-]&lt;[&lt;]&gt;&gt;[.&gt;]&lt;[&lt;]&gt;[.[&gt;]].&gt;&gt;&gt;]&lt;+&lt;,]\n</code></pre>\n\n<p><a href=\"https://tio.run/##JYpBCoAwDATpe2rzgrCv8LbkUEVpFTzY9v2xIAzMHGZ7c33Osd/ukYkRMFBVmEypBlDwF4UwE8xDoy7mvpbawuQarYcc@jH1AQ\" rel=\"nofollow noreferrer\" title=\"brainfuck – Try It Online\">Try it online!</a></p>\n\n<p>This code uses a few cheats, so i don't know if it is competing. The separator in the input is a 0x01. The input needs an extra trailing separator, otherwise the last word won't be printed.</p>\n\n<p><strong>code:</strong></p>\n\n<pre><code>+[                  enter the loop / the first round only the last three commands of the main loop are interesting\n  -[                if input is not 0x01\n    +               restore character\n    &gt;&gt;              go to exit if\n  ]\n  &gt;[                else\n    &lt;&lt;.[-]          print and delete last character\n    &lt;[&lt;]&gt;&gt;[.&gt;]      print all characters starting at the second\n    &lt;[&lt;]&gt;[.[&gt;]]     print first character and go to end if word is longer than one character\n    .               print null (space)\n    &gt;&gt;&gt;             leave a zero cell and go to exit else\n  ]\n  &lt;+                set new else marker\n  &lt;                 go to new input location\n  ,                 input next character\n]\n</code></pre>\n"},{"answer_id":185723,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185723#185723","body":"<h1><a href=\"https://github.com/Soaku/Pepe\" rel=\"noreferrer\">Pepe</a>, <s>107</s> 105 bytes</h1>\n<pre><code>REEeREeeEeeeeerEEreREEEeREEEEEEeREEEErEEREEEEEEEreererEEEeererEEEerEEeERrEEEeerEEeerereeerEEEEeEEEReEeree\n</code></pre>\n<p><a href=\"https://soaku.github.io/Pepe/#T!8hE$!pE5!rEE7*$-c$!o!m--c!k$GRyL*\" rel=\"noreferrer\">Try it online!</a></p>\n<p><strong>Explanation:</strong></p>\n<p>Notation on comments: <code>command-explanation -&gt; (stack) // explanation</code></p>\n<pre class=\"lang-c prettyprint-override\"><code>REEe # input -&gt; (R)\nREeeEeeeee # push space to last -&gt; (R) // this prevents an infinite loop\n\nrEE # create loop labeled 0 and automatically push 0 \n  re # pop 0 -&gt; (r)\n  REEEe # go to last item -&gt; (R)\n  REEEEEEe # ...then copy the char to other stack\n  REEEE # go to first item -&gt; (R)\n\n  rEE # create loop labeled 32 // detect space\n    REEEEEEE # move item to other stack (R)\n  ree # do this while char != 32\n\n  re # pop 32 -&gt; (r)\n  rEEEee # push item (dup to end) -&gt; (r)\n  re # ...then pop -&gt; (r)\n  rEEEe rEEeE # go to 2nd to last item -&gt; (r)\n  RrEEEee # push the item (R flag: dup to first) -&gt; (r)\n  rEEee # go to next -&gt; (r) //\n  re # ...then pop -&gt; (r)\n  reee rEEEEeEEE # out all as char then clear -&gt; (r)\n  ReEe # out 32 as char -&gt; (R)\nree # do this while stack != 0\n</code></pre>\n"},{"answer_id":186203,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/186203#186203","body":"<h1><a href=\"http://julialang.org/\" rel=\"nofollow noreferrer\">Julia 1.0</a>, 75 bytes</h1>\n\n\n\n<pre class=\"lang-julia prettyprint-override\"><code>x-&gt;join([(n=length(s);n&lt;2 ? s : s[n]*s[2:n-1]*s[1]) for s in split(x)],\" \")\n</code></pre>\n\n<p><a href=\"https://tio.run/##VY7LDoIwFET3fsWEVWtkAUvf/0FYVLiFmuaW9FbBr8e6UneTMzmZuT@8M9Wy2tONBsfrUp7vwbFqFJ888ZBGJfrAxxoXCPaQhtutNPWey@oTqlbDhpg7x5DJu6QW3e4KFHol7jdXGcMMqwqZzYQ0EqyLkmC4hzc5eEqJIoIFPSm@MIfYF/rrjeR9@FD/hxNltzNC8ksNbujQI69gyA/e\" rel=\"nofollow noreferrer\" title=\"Julia 1.0 – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185885,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185885#185885","body":"<h1>Ruby, 53 bytes</h1>\n<pre><code>gets.split(&quot; &quot;).map{|z|print z[-1]+z[1..-2]+z[0],&quot; &quot;}\n</code></pre>\n<p>I tried it without regex. The output prints each word on a new line. If that's against the rules, let me know and I'll fix it.</p>\n<p>Ungolfed:</p>\n<pre><code>gets.split(&quot; &quot;).map {|z|\n    print z[-1] + z[1..-2] + z[0], &quot; &quot;\n}\n</code></pre>\n"},{"answer_id":185686,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185686#185686","body":"<h1>TeX, 216 bytes (4 lines, 54 characters each)</h1>\n\n<p><strong><em>Because it's not about the byte count, it's about the quality of the typeset output :-)</em></strong></p>\n\n<pre class=\"lang-latex prettyprint-override\"><code>{\\let~\\catcode~`A13 \\defA#1{~`#113\\gdef}AGG#1{~`#1 13%\n\\global\\let}GFF\\elseGHH\\fiAQQ{Q}AII{\\ifxQ}AEE#1#2#3|{%\nI#3#2#1FE{#1#2}#3|H}ADD#1#2|{I#1FE{}#1#2|H}ACC#1#2|{D%\n#2Q|#1 }ABBH#1 {HI#1FC#1|BH}\\gdef\\S#1{\\iftrueBH#1 Q }}\n</code></pre>\n\n<p><a href=\"https://www.overleaf.com/read/dkypfbgxmhdw\" rel=\"noreferrer\">Try it Online! (Overleaf; not sure how it works)</a></p>\n\n<p>Full test file:</p>\n\n<pre class=\"lang-latex prettyprint-override\"><code>{\\let~\\catcode~`A13 \\defA#1{~`#113\\gdef}AGG#1{~`#1 13%\n\\global\\let}GFF\\elseGHH\\fiAQQ{Q}AII{\\ifxQ}AEE#1#2#3|{%\nI#3#2#1FE{#1#2}#3|H}ADD#1#2|{I#1FE{}#1#2|H}ACC#1#2|{D%\n#2Q|#1 }ABBH#1 {HI#1FC#1|BH}\\gdef\\S#1{\\iftrueBH#1 Q }}\n\n\\S{swap the a first and last letters of each word}\n\npwas eht a tirsf dna tasl setterl fo hace dorw\n\n\\S{SWAP THE A FIRST AND LAST LETTERS OF EACH WORD}\n\n\\bye\n</code></pre>\n\n<p>Output:</p>\n\n<blockquote>\n  <p><a href=\"https://i.stack.imgur.com/846L5.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/846L5.png\" alt=\"enter image description here\"></a></p>\n</blockquote>\n\n<hr>\n\n<p>For LaTeX you just need the boilerplate:</p>\n\n<pre class=\"lang-latex prettyprint-override\"><code>\\documentclass{article}\n\\begin{document}\n\n{\\let~\\catcode~`A13 \\defA#1{~`#113\\gdef}AGG#1{~`#1 13%\n\\global\\let}GFF\\elseGHH\\fiAQQ{Q}AII{\\ifxQ}AEE#1#2#3|{%\nI#3#2#1FE{#1#2}#3|H}ADD#1#2|{I#1FE{}#1#2|H}ACC#1#2|{D%\n#2Q|#1 }ABBH#1 {HI#1FC#1|BH}\\gdef\\S#1{\\iftrueBH#1 Q }}\n\n\\S{swap the a first and last letters of each word}\n\npwas eht a tirsf dna tasl setterl fo hace dorw\n\n\\S{SWAP THE A FIRST AND LAST LETTERS OF EACH WORD}\n\n\\end{document}\n</code></pre>\n\n<hr>\n\n<h2>Explanation</h2>\n\n<p>TeX is a strange beast. Reading normal code and understanding it is a feat by itself. Understanding obfuscated TeX code goes a few steps further. I'll try to make this understandable for people who don't know TeX as well, so before we start here's a few concepts about TeX to make things easier to follow:</p>\n\n<h3>For (not so) absolute TeX beginners</h3>\n\n<ul>\n<li><p>First, and most important item in this list: the code does <em>not</em> have to be in rectangle shape, <a href=\"https://tex.stackexchange.com/q/450795/134574\">even though</a> <a href=\"https://tex.stackexchange.com/a/156937/134574\">pop culture</a> <a href=\"https://tex.stackexchange.com/a/474872/134574\">might lead you</a> <a href=\"https://tex.stackexchange.com/a/406914/134574\">to think so</a>.</p></li>\n<li><p>TeX is a macro expansion language. You can, as an example, define <code>\\def\\sayhello#1{Hello, #1!}</code> and then write <code>\\sayhello{Code Golfists}</code> to get TeX to print <code>Hello, Code Golfists!</code>. This is called an “undelimited macro”, and to feed it the first (and only, in this case) parameter you enclose it in braces. TeX removes those braces when the macro grabs the argument. You can use up to 9 parameters: <code>\\def\\say#1#2{#1, #2!}</code> then <code>\\say{Good news}{everyone}</code>.</p></li>\n<li><p>The counterpart of undelimited macros are, unsurprisingly, delimited ones :) You could make the previous definition a tad more <em>semantical</em>: <code>\\def\\say #1 to #2.{#1, #2!}</code>. In this case the parameters are followed by so-called <em>parameter text</em>. Such parameter text delimits the argument of the macro (<code>#1</code> is delimited by <code>␣to␣</code>, spaces included, and <code>#2</code> is delimited by <code>.</code>). After that definition you can write <code>\\say Good news to everyone.</code>, which will expand to <code>Good news, everyone!</code>. Nice, isn't it? :) However a delimited argument is (quoting the <em>TeXbook</em>) “the shortest (possibly empty) sequence of tokens with properly nested <code>{...}</code> groups that is followed in the input by this particular list of non-parameter tokens”. This means that the expansion of <code>\\say Let's go to the mall to Martin</code> will produce a weird sentence. In this case you'd need to “hide” the first <code>␣to␣</code> with <code>{...}</code>: <code>\\say {Let's go to the mall} to Martin</code>.</p></li>\n<li><p>So far so good. Now things start to get weird. When TeX reads a character (which is defined by a “character code”), it assigns that character a “category code” (catcode, for friends :) which defines what that character will mean. This combination of character and category code makes a token (more on that <a href=\"https://tex.stackexchange.com/a/104050/134574\">here</a>, for example). The ones which are of interest for us here are basically:</p>\n\n<ul>\n<li><p><strong>catcode 11</strong>, which define tokens which can make up a control sequence (a posh name for a macro). By default all letters [a-zA-Z] are catcode 11, so I can write <code>\\hello</code>, which is one single control sequence, while <code>\\he11o</code> is the control sequence <code>\\he</code> followed by two characters <code>1</code>, followed by the letter <code>o</code>, because <code>1</code> is not catcode 11. If I did <code>\\catcode`1=11</code>, from that point on <code>\\he11o</code> would be one control sequence. One important thing is that catcodes are set when TeX first sees the character at hand, and such catcode is <em>frozen</em>... FOREVER! (terms and conditions may apply)</p></li>\n<li><p><strong>catcode 12</strong>, which are most of other characters, such as <code>0\"!@*(?,.-+/</code> and so forth. They are the <em>least</em> special type of catcode as they serve only for writing stuff on the paper. But hey, who uses TeX for writing?!? (again, terms and conditions may apply)</p></li>\n<li><p><strong>catcode 13</strong>, which is hell :) Really. Stop reading and go do something out of your life. You don't want to know what catcode 13 is. Ever heard of Friday, 13th? Guess where it got its name from! Continue at your own risk! A catcode 13 character, also called an “active” character, is not just a character anymore, it is a macro itself! You can define it to have parameters and expand to something like we saw above. After you do <code>\\catcode`e=13</code> you <em>think</em> you can do <code>\\def e{I am the letter e!}</code>, BUT. YOU. CANNOT! <code>e</code> is not a letter anymore, so <code>\\def</code> is not the <code>\\def</code> you know, it is <code>\\d e f</code>! Oh, choose another letter you say? Okay! <code>\\catcode`R=13 \\def R{I am an ARRR!}</code>. Very well, Jimmy, try it! I dare you do that and write an <code>R</code> in your code! That's what a catcode 13 is. I AM CALM! Let's move on.</p></li>\n</ul></li>\n<li><p>Okay, now to grouping. This is fairly straightforward. Whatever assignments (<code>\\def</code> is an assignment operation, <code>\\let</code> (we'll get into it) is another) done in a group are restored to what they were before that group started unless that assignment is global. There are several ways to start groups, one of them is with catcode 1 and 2 characters (oh, catcodes again). By default <code>{</code> is catcode 1, or begin-group, and <code>}</code> is catcode 2, or end-group. An example: <code>\\def\\a{1} \\a{\\def\\a{2} \\a} \\a</code> This prints <code>1 2 1</code>. Outside the group <code>\\a</code> was <code>1</code>, then inside it was redefined to <code>2</code>, and when the group ended, it was restored to <code>1</code>.</p></li>\n<li><p>The <code>\\let</code> operation is another assignment operation like <code>\\def</code>, but rather different. With <code>\\def</code> you <em>define</em> macros which will expand to stuff, with <code>\\let</code> you create copies of already existing things. After <code>\\let\\blub=\\def</code> (the <code>=</code> is optional) you can change the start of the <code>e</code> example from the catcode 13 item above to <code>\\blub e{...</code> and have fun with that one. Or better, instead of breaking stuff you can <em>fix</em> (would you look at that!) the <code>R</code> example: <code>\\let\\newr=R \\catcode`R=13 \\def R{I am an A\\newr\\newr\\newr!}</code>. Quick question: could you rename to <code>\\newR</code>?</p></li>\n<li><p>Finally, the so-called “spurious spaces”. This is kind of a taboo topic because there are people who claim that reputation earned in the <a href=\"https://tex.stackexchange.com\">TeX - LaTeX Stack Exchange</a> by answering “spurious spaces” questions should not be considered, while others wholeheartedly disagree. Whom do you agree with? Place your bets! Meanwhile: TeX understands a line break as a space. Try to write several words with a line break (not an <em>empty line</em>) between them. Now add a <code>%</code> at the end of these lines. It's like you were “commenting out” these end-of-line spaces. That's it :)</p></li>\n</ul>\n\n<h3>(Sort of) ungolfing the code</h3>\n\n<p>Let's make that rectangle into something (arguably) easier to follow:</p>\n\n<pre class=\"lang-latex prettyprint-override\"><code>{\n\\let~\\catcode\n~`A13\n\\defA#1{~`#113\\gdef}\nAGG#1{~`#113\\global\\let}\nGFF\\else\nGHH\\fi\nAQQ{Q}\nAII{\\ifxQ}\nAEE#1#2#3|{I#3#2#1FE{#1#2}#3|H}\nADD#1#2#3|{I#2FE{#1}#2#3|H}\nACC#1#2|{D{}#2Q|#1 }\nABBH#1 {HI#1FC#1|BH}\n\\gdef\\S#1{\\iftrueBH#1 Q }\n}\n</code></pre>\n\n<h3>Explanation of each step</h3>\n\n<p>each line contains one single instruction. Let's go one by one, dissecting them:</p>\n\n<p><strong><code>{</code></strong><br>\nFirst we start a group to keep some changes (namely catcode changes) local so that they don't mess up the input text.</p>\n\n<p><strong><code>\\let~\\catcode</code></strong><br>\nBasically <em>all</em> TeX obfuscation codes start with this instruction. By default, both in plain TeX and LaTeX, the <code>~</code> character is the one active character which can be made into a macro for further use. And the best tool for weirdifying TeX code are catcode changes, so this is generally the best choice. Now instead of <code>\\catcode`A=13</code> we can write <code>~`A13</code> (the <code>=</code> is optional):</p>\n\n<p><strong><code>~`A13</code></strong><br>\nNow the letter <code>A</code> is an active character, and we can define it to do something:</p>\n\n<p><strong><code>\\defA#1{~`#113\\gdef}</code></strong><br>\n<code>A</code> is now a macro that takes one argument (which should be another character). First the catcode of the argument is changed to 13 to make it active: <code>~`#113</code> (replace the <code>~</code> by <code>\\catcode</code> and add an <code>=</code> and you have: <code>\\catcode`#1=13</code>). Finally it leaves a <code>\\gdef</code> (global <code>\\def</code>) in the input stream. In short, <code>A</code> makes another character active and start its definition. Let's try it:</p>\n\n<p><strong><code>AGG#1{~`#113\\global\\let}</code></strong><br>\n<code>AG</code> first “activates” <code>G</code> and does <code>\\gdef</code>, which followed by the next <code>G</code> starts the definition. The definition of <code>G</code> is very similar to that of <code>A</code>, except that instead of <code>\\gdef</code> it does a <code>\\global\\let</code> (there isn't a <code>\\glet</code> like the <code>\\gdef</code>). In short, <code>G</code> activates a character and makes it be something else. Let's make shortcuts for two commands we'll use later:</p>\n\n<p><strong><code>GFF\\else</code></strong><br>\n<strong><code>GHH\\fi</code></strong><br>\nNow instead of <code>\\else</code> and <code>\\fi</code> we can simply use <code>F</code> and <code>H</code>. Much shorter :)</p>\n\n<p><strong><code>AQQ{Q}</code></strong><br>\nNow we use <code>A</code> again to define another macro, <code>Q</code>. The above statement basically does (in a less obfuscated language) <code>\\def\\Q{\\Q}</code>. This isn't a terribly interesting definition, but it has an interesting feature. Unless you do want to break some code, the only macro that expands to <code>Q</code> is <code>Q</code> itself, so it acts like a unique marker (it's called a <em>quark</em>). You can use the <code>\\ifx</code> conditional to test if the argument of a macro is such quark with <code>\\ifx Q#1</code>:</p>\n\n<p><strong><code>AII{\\ifxQ}</code></strong><br>\nso you can be pretty sure that you found such a marker. Notice that in this definition I removed the space between <code>\\ifx</code> and <code>Q</code>. Usually this would lead to an error (note that the syntax highlight thinks that <code>\\ifxQ</code> is one thing), but since now <code>Q</code> is catcode 13 it cannot form a control sequence. Be careful, however, not to expand this quark or you'll get stuck in an infinite loop because <code>Q</code> expands to <code>Q</code> which expands to <code>Q</code> which...</p>\n\n<p>Now that the preliminaries are done, we can go to the proper algorithm to pwas eht setterl. Due to TeX's tokenization the algorithm has to be written backwards. This is because at the time you do a definition TeX will tokenize (assign catcodes) to the characters in the definition using the current settings so, for example, if I do:</p>\n\n<pre class=\"lang-latex prettyprint-override\"><code>\\def\\one{E}\n\\catcode`E=13\\def E{1}\n\\one E\n</code></pre>\n\n<p>the output is <code>E1</code>, whereas if I change the order of the definitions:</p>\n\n<pre class=\"lang-latex prettyprint-override\"><code>\\catcode`E=13\\def E{1}\n\\def\\one{E}\n\\one E\n</code></pre>\n\n<p>the output is <code>11</code>. This is because in the first example the <code>E</code> in the definition was tokenized as a letter (catcode 11) before the catcode change, so it will always be a letter <code>E</code>. In the second example, however, <code>E</code> was first made active, and only then <code>\\one</code> was defined, and now the definition contains the catcode 13 <code>E</code> which expands to <code>1</code>.</p>\n\n<p>I will, however, overlook this fact and reorder the definitions to have a logical (but not working) order. In the following paragraphs you can assume that the letters <code>B</code>, <code>C</code>, <code>D</code>, and <code>E</code> are active.</p>\n\n<p><strong><code>\\gdef\\S#1{\\iftrueBH#1 Q }</code></strong><br>\n(notice there was a small bug in the previous version, it did not contain the final space in the definition above. I only noticed it while writing this. Read on and you'll see why we need that one to properly terminate the macro.)<br>\nFirst we define the user-level macro, <code>\\S</code>. This one shouldn't be an active character to have a friendly (?) syntax, so the macro for gwappins eht setterl is <code>\\S</code>. The macro starts with an always-true conditional <code>\\iftrue</code> (it will soon be clear why), and then calls the <code>B</code> macro followed by <code>H</code> (which we defined earlier to be <code>\\fi</code>) to match the <code>\\iftrue</code>. Then we leave the argument of the macro <code>#1</code> followed by a space and by the quark <code>Q</code>. Suppose we use <code>\\S{hello world}</code>, then the <em>input stream</em> should look like this: <code>\\iftrue BHhello world Q␣</code> (I replaced the last space by a <code>␣</code> so that the rendering of the site does not eat it, like I did in the previous version of the code). <code>\\iftrue</code> is true, so it expands and we are left with <code>BHhello world Q␣</code>. TeX does <em>not</em> remove the <code>\\fi</code> (<code>H</code>) after the conditional is evaluated, instead it leaves it there until the <code>\\fi</code> is <em>actually</em> expanded. Now the <code>B</code> macro is expanded:</p>\n\n<p><strong><code>ABBH#1 {HI#1FC#1|BH}</code></strong><br>\n<code>B</code> is a <em>delimited macro</em> whose parameter text is <code>H#1␣</code>, so the argument is whatever is between <code>H</code> and a space. Continuing the example above the input stream prior to the expansion of <code>B</code> is <code>BHhello world Q␣</code>. <code>B</code> is followed by <code>H</code>, as it should (otherwise TeX would raise an error), then the next space is between <code>hello</code> and <code>world</code>, so <code>#1</code> is the word <code>hello</code>. And here we got to split the input text at the spaces. Yay :D The expansion of <code>B</code> removes everything up to the first space from the input stream and replaces by <code>HI#1FC#1|BH</code> with <code>#1</code> being <code>hello</code>: <code>HIhelloFChello|BHworld Q␣</code>. Notice that there is a new <code>BH</code> later in the input stream, to do a tail recursion of <code>B</code> and process later words. After this word is processed <code>B</code> processes the next word until the word-to-be-processed is the quark <code>Q</code>. The last space after <code>Q</code> is needed because the delimited macro <code>B</code> <em>requires</em> one at the end of the argument. With the previous version (see edit history) the code would misbehave if you used <code>\\S{hello world}abc abc</code> (the space between the <code>abc</code>s would vanish).</p>\n\n<p>OK, back to the input stream: <code>HIhelloFChello|BHworld Q␣</code>. First there's the <code>H</code> (<code>\\fi</code>) that completes the initial <code>\\iftrue</code>. Now we have this (pseudocoded):</p>\n\n<pre class=\"lang-latex prettyprint-override\"><code>I\n  hello\nF\n  Chello|B\nH\nworld Q␣\n</code></pre>\n\n<p>The <code>I...F...H</code> think is actually a <code>\\ifx Q...\\else...\\fi</code> structure. The <code>\\ifx</code> test checks if the (first token of the) word grabbed is the <code>Q</code> quark. If it is there is nothing else to do and the execution terminates, otherwise what remains is: <code>Chello|BHworld Q␣</code>. Now <code>C</code> is expanded:</p>\n\n<p><strong><code>ACC#1#2|{D#2Q|#1 }</code></strong><br>\nThe first argument of <code>C</code> is undelimited, so unless braced it will be a single token, The second argument is delimited by <code>|</code>, so after the expansion of <code>C</code> (with <code>#1=h</code> and <code>#2=ello</code>) the input stream is: <code>DelloQ|h BHworld Q␣</code>. Notice that another <code>|</code> is put there, and the <code>h</code> of <code>hello</code> is put after that. Half the swapping is done; the first letter is at the end. In TeX it is easy to grab the first token of a token list. A simple macro <code>\\def\\first#1#2|{#1}</code> gets the first letter when you use <code>\\first hello|</code>. The last one is a problem because TeX always grabs the “smallest, possibly empty” token list as argument, so we need a few work-arounds. Next item in the token list is <code>D</code>:</p>\n\n<p><strong><code>ADD#1#2|{I#1FE{}#1#2|H}</code></strong><br>\nThis <code>D</code> macro is one of the work-arounds and it's useful in the sole case where the word has a single letter. Suppose instead of <code>hello</code> we had <code>x</code>. In this case the input stream would be <code>DQ|x</code>, then <code>D</code> would expand (with <code>#1=Q</code>, and <code>#2</code> empty) to: <code>IQFE{}Q|Hx</code>. This is similar to the <code>I...F...H</code> (<code>\\ifx Q...\\else...\\fi</code>) block in <code>B</code>, which will see that the argument is the quark and will interrupt the execution leaving only <code>x</code> for typesetting. In other cases (returning to the <code>hello</code> example), <code>D</code> would expand (with <code>#1=e</code> and <code>#2=lloQ</code>) to: <code>IeFE{}elloQ|Hh BHworld Q␣</code>. Again, the <code>I...F...H</code> will check for <code>Q</code> but will fail and take the <code>\\else</code> branch: <code>E{}elloQ|Hh BHworld Q␣</code>. Now the last piece of this thing, the <code>E</code> macro would expand:</p>\n\n<p><strong><code>AEE#1#2#3|{I#3#2#1FE{#1#2}#3|H}</code></strong><br>\nThe parameter text here is quite similar to <code>C</code> and <code>D</code>; the first and second arguments are undelimited, and the last one is delimited by <code>|</code>. The input stream looks like this: <code>E{}elloQ|Hh BHworld Q␣</code>, then <code>E</code> expands (with <code>#1</code> empty, <code>#2=e</code>, and <code>#3=lloQ</code>): <code>IlloQeFE{e}lloQ|HHh BHworld Q␣</code>. Another <code>I...F...H</code> block checks for the quark (which sees <code>l</code> and returns <code>false</code>): <code>E{e}lloQ|HHh BHworld Q␣</code>. Now <code>E</code> expands again (with <code>#1=e</code> empty, <code>#2=l</code>, and <code>#3=loQ</code>): <code>IloQleFE{el}loQ|HHHh BHworld Q␣</code>. And again <code>I...F...H</code>. The macro does a few more iterations until the <code>Q</code> is finally found and the <code>true</code> branch is taken: <code>E{el}loQ|HHHh BHworld Q␣</code> -> <code>IoQlelFE{ell}oQ|HHHHh BHworld Q␣</code> -> <code>E{ell}oQ|HHHHh BHworld Q␣</code>-> <code>IQoellFE{ello}Q|HHHHHh BHworld Q␣</code>. Now the quark is found and the conditional expands to: <code>oellHHHHh BHworld Q␣</code>. Phew.</p>\n\n<p>Oh, wait, what are these? NORMAL LETTERS? Oh, boy! The letters are finally found and TeX writes down <code>oell</code>, then a bunch of <code>H</code> (<code>\\fi</code>) are found and expanded (to nothing) leaving the input stream with: <code>oellh BHworld Q␣</code>. Now the first word has the first and last letters swapped and what TeX finds next is the other <code>B</code> to repeat the whole process for the next word.</p>\n\n<p><strong><code>}</code></strong><br>\nFinally we end the group started back there so that all local assignments are undone. The local assignments are the catcode changes of the letters <code>A</code>, <code>B</code>, <code>C</code>, ... which were made macros so that they return to their normal letter meaning and can be safely used in the text. And that's it. Now the <code>\\S</code> macro defined back there will trigger the processing of the text as above.</p>\n\n<p>One interesting thing about this code is that it is fully expandable. That is, you can safely use it in moving arguments without worrying that it will explode. You can even use the code to check if the last letter of a word is the same as the second (for whatever reason you would need that) in an <code>\\if</code> test:</p>\n\n<pre class=\"lang-latex prettyprint-override\"><code>\\if\\S{here} true\\else false\\fi % prints true (plus junk, which you would need to handle)\n\\if\\S{test} true\\else false\\fi % prints false\n</code></pre>\n\n<p>Sorry for the (probably far too) wordy explanation. I tried to make it as clear as possible for non TeXies as well :)</p>\n\n<h3>Summary for the impatient</h3>\n\n<p>The macro <code>\\S</code> prepends the input with an active character <code>B</code> which grabs lists of tokens delimited by a final space and passes them to <code>C</code>. <code>C</code> takes the first token in that list and moves it to the end of the token list and expands <code>D</code> with what remains. <code>D</code> checks if “what remains” is empty, in which case a single-letter word was found, then do nothing; otherwise expands <code>E</code>. <code>E</code> loops through the token list until it finds the last letter in the word, when it is found it leaves that last letter, followed by the middle of the word, which is then followed by the first letter left at the end of the token stream by <code>C</code>.</p>\n"},{"answer_id":185716,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185716#185716","body":"<h2><a href=\"https://en.wikipedia.org/wiki/C_(programming_language)\" rel=\"nofollow noreferrer\">C</a> (gcc), 62 bytes</h2>\n\n<pre class=\"lang-c prettyprint-override\"><code>t;*s;f(int*i){for(s=i;*++i;i[1]&gt;64||(t=*i,*i=*s,*s=t,s=i+2));}\n</code></pre>\n\n<p>I wanted to use a xor swap but that fails if a word is only one character long.</p>\n\n<p><a href=\"https://tio.run/##VZDdasMwDIWv26cQgYHjZNCN0RuT7QX6Bl0vjGOnAscOlkvoT549s7sWGt1IfDqS7KPeO6XmOQpOwjB0kWN5NT4walDwqkKB@4/D9/brdmOx4VhzbDjVnJpYJ0n1WZZimtMc9BIdK@G6hhTKO4qQ10HUFGl/gObRyrEraJQDxKMGgyEppWvBylRYHaMOBN6AluoIow9tUb8MHrW1PmO75PkMKEmaFngIvguy79F1MJwuF6vpfkz5VkPnrflZyNGBhC5o7aDXsvXjonuWZwhSaSXDC9/cq0ncU7IOso2AzUY8/o4HAVhV2ZvVvyXJjFFRexrYU1GK9cqwmNM4hKQybFe8Wfp1RQ0ZP6@Z9Dj2BNN6mv8A\" rel=\"nofollow noreferrer\">Try it online</a></p>\n"},{"answer_id":185828,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185828#185828","body":"<h2>Brainf**k, 126</h2>\n\n<pre><code>&gt;+[,[-&gt;&gt;&gt;+&lt;+&lt;+&lt;]&gt;----------[[-]&lt;+&gt;]&gt;[[-]&lt;&lt;+&gt;&gt;]&lt;&lt;--[+&lt;.&lt;[[&lt;]&gt;&gt;&gt;[&lt;.&gt;&gt;]&lt;[&lt;]&gt;.&lt;]&gt;[&gt;]&gt;-&gt;&gt;[.[-]&lt;+&gt;]&lt;&lt;&lt;]&gt;+[-&gt;&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;+&lt;]&gt;[-&lt;+&gt;]&lt;]\n</code></pre>\n\n<p><a href=\"https://tio.run/##PU1BCsMwDLvnK17yAqNP7GhySLeUlZUy0pQ9P5NLmY2NLMvy1MqyzcfjPQbEbhYBiHpmxH@YxayCjBMQgZ20aFIzSgHT5KwPiWUU08vSdalKUtzeop4O5PwJR1/nMe7f8gn9VcO8tL2Hsj3DWgjW2ntt@w8\" rel=\"nofollow noreferrer\" title=\"brainfuck – Try It Online\">Try it online!</a></p>\n\n<p>Could definitely be golfed further.</p>\n"},{"answer_id":185796,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185796#185796","body":"<h1><a href=\"https://www.gnu.org/software/sed/\" rel=\"nofollow noreferrer\">sed</a>, 34 bytes</h1>\n\n<p>And presumably the pattern idea will work with most RE tools (and I do know there are differences between standard RE and extended RE).</p>\n\n<pre><code>s,\\b\\(\\w\\)\\(\\w*\\)\\(\\w\\)\\b,\\3\\2\\1,g\n</code></pre>\n\n<p><a href=\"https://tio.run/##NY89TsUwEIT7nGJKQHnFg1MgISpKN5tkia04Xss/L@T0YeNAM2uNZz@PM0@3OdTjyL0ZzJPZzPOpL9dQHXrzZl7NvZ@P41MKo1gqKoxUPWdk2i9rY0jwOyw9NCTINUZJRU3G4sLUyTcyR0pUJOGGd9CK0YpkF2bkSKPSvni0wY3kFeSUKWnJ2FyxneiTCZt1hVsWpBfsfY@hlpZ13qPUFMAPTnuxJ9aFs0ljdy602hwmfLjQDhrJaL7L4B9ao2fUTLPiE@tXwuR5@q/Nfu8Ut9LCF@lvQWqJ2sGLLNDynLpf\" rel=\"nofollow noreferrer\" title=\"sed – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185684,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185684#185684","body":"<h1><a href=\"https://www.wolfram.com/wolframscript/\" rel=\"nofollow noreferrer\">Wolfram Language (Mathematica)</a>, 58 bytes</h1>\n\n<pre><code>StringReplace[#,a:u~~w:u..~~b:u:&gt;b&lt;&gt;w&lt;&gt;a/.{u-&gt;Except@#2}]&amp;\n</code></pre>\n\n<p><a href=\"https://tio.run/##TY89a8MwEIb3/IrDgkyOCx1NKrRkL@0YMlzkk22QLKEP1MTYf91V28Hdjufu4b3XYBzIYBwlbupt@4x@nPoPcholXVmNbVrX3KamWdd7m1p@P/N85vjSzOnEL1@SXBTsdbkdt/dixuvM2HLiSjB2Owoh5sNchYwOSgqo0YcIOHWgsQyaYiQfwCoglANk67uqrqBa6mINpLX9YfofjFQ8iYHCzpy3vUdjyt/g0vOpKfxmSNsR9Far/XScAKH3RBMYws7mffXAB/jSWaL/g4dl@wY\" rel=\"nofollow noreferrer\" title=\"Wolfram Language (Mathematica) – Try It Online\">Try it online!</a></p>\n\n<p><em>-22 bytes from @attinat</em>    </p>\n\n<p><em>-12 bytes from @M.Stern</em></p>\n"},{"answer_id":185773,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185773#185773","body":"<h1><a href=\"https://github.com/lynn/z80golf\" rel=\"nofollow noreferrer\">Z80Golf</a>, 43 bytes</h1>\n\n<pre><code>00000000: 2100 c0cd 0380 3822 5745 cd03 8038 09fe  !.....8\"WE...8..\n00000010: 2028 0570 4723 18f2 736b 707e 23a7 2803   (.pG#..skp~#.(.\n00000020: ff18 f87a ff3e 20ff 18d6 76              ...z.&gt; ...v\n</code></pre>\n\n<p><a href=\"https://tio.run/##VY@xboNADIb3PsXfsDCdjA/wtUO3KGu3zFcOo6qEQ5BkYOirkzu1Hfotv2XZn@XN0RBH3Xf65RVcEaGjLoCsI1jHjEbqBl0gC5eaoBftgWeTcYfzMYcxTz@GKjuI01QjhFrYonLKENt@QEh6sPUCTiYApZlPhTHr1/xdmPLPwcmhWjmoE58qm5ZINYlCC2nxj3R9M2857vv@vsRh8ZfL5zRgvm3b2K/wU4DHGK@Iii6GHvnnBw\" rel=\"nofollow noreferrer\" title=\"Z80Golf – Try It Online\">Try it online!</a></p>\n\n<p>Corresponding assembly:</p>\n\n<pre><code>mainloop:\n    ld hl, $c000\n    call $8003\n    jr c, hlt\n    ld d, a\n    ld b, l ; handle 1-character words\ninputloop:\n    call $8003\n    jr c, endinput\n    cp $20\n    jr z, endinput\n    ld (hl), b ; don't store the last character\n    ld b, a\n    inc hl\n    jr inputloop\nendinput:\n    ld (hl), e ; always 0\n    ld l, e\n    ld (hl), b\noutputloop:\n    ld a, (hl)\n    inc hl\n    and a\n    jr z, endoutput\n    rst $38\n    jr outputloop\nendoutput:\n    ld a, d\n    rst $38\n    ld a, $20\n    rst $38\n    jr mainloop\nhlt:\n    halt\n</code></pre>\n"},{"answer_id":185707,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185707#185707","body":"<h1><a href=\"https://github.com/DennisMitchell/jelly\" rel=\"nofollow noreferrer\">Jelly</a>, 9 bytes</h1>\n\n<pre><code>ḲṪ;ṙ1$Ɗ€K\n</code></pre>\n\n<p><a href=\"https://tio.run/##y0rNyan8///hjk0Pd66yfrhzpqHKsa5HTWu8////7wGUy1fIyC9XSCxKVajML7VX8FRIzFUoB4orlGQk5mUX6wEA\" rel=\"nofollow noreferrer\" title=\"Jelly – Try It Online\">Try it online!</a></p>\n\n<h3>Explanation</h3>\n\n<pre><code>ḲṪ;ṙ1$Ɗ€K | monadic link taking the string as input\n\nḲ         | split at spaces\n      Ɗ€  | for each word, do the following:\n Ṫ        | - pop the last letter\n  ;ṙ1$    | - concatenate to the remaining letters rotated left once\n        K | finally, join with spaces\n</code></pre>\n"},{"answer_id":185763,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185763#185763","body":"<h1><a href=\"https://github.com/TryItOnline/TioSetup/wiki/Powershell\" rel=\"noreferrer\">PowerShell</a>, 37 bytes</h1>\n\n\n\n<pre class=\"lang-powershell prettyprint-override\"><code>$args-replace'(\\w)(\\w*)(\\w)','$3$2$1'\n</code></pre>\n\n<p><a href=\"https://tio.run/##TU/dasMgGL3PUxyCW5ORXmy7GxT2IIMh@sUETHRqcW3XZ88@k65MUDx/fkfvMoU4kLWL6A@XRchg4j6Qt1LRrvnILe@ncrS7bidexYt43i3Xqnpvqq6pY5YeaSD0Y4gJctawki@WUuJ34XqQVAOyC7ruap9lBA0Jie099CyRZLSIq92idxh4LrQLuW7LgNLMlbjlPGrHcCiyvemJeJqSkWKRVxQZqU31wZkgp2mcDfzxfLYU147KaYJxti8hczd5xNXk12bktOJG1mxvjTMkTCCaMZHULpfsPDI5M2mQCzlt3pM8IfBHlAzF9R@2VYsfPOBSgZeIHQR9e1KJNA4QnxsdKB5tYuJR9GxayVo0N36v6Oueat/@7HV1XX4B\" rel=\"noreferrer\" title=\"PowerShell – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185759,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185759#185759","body":"<h2>sed, 64 bytes</h2>\n\n<pre><code>sed -E 's/\\b([[:alpha:]])([[:alpha:]]*)([[:alpha:]])\\b/\\3\\2\\1/g'\n</code></pre>\n"},{"answer_id":185690,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185690#185690","body":"<h1><a href=\"https://php.net/\" rel=\"nofollow noreferrer\">PHP</a>, 73 bytes</h1>\n\n\n\n<pre class=\"lang-php prettyprint-override\"><code>foreach(explode(' ',$argn)as$w){[$w[0],$w[-1]]=[$w[-1],$w[0]];echo\"$w \";}\n</code></pre>\n\n<p><a href=\"https://tio.run/##JY1BCoMwFET3nmIIARUstmsrHkSy@JifphBMSAIplJ49tXYzPAbeTLCh3pdgQ9NIio8dM0QqFJAtwzxjyqBdw9EBjnPmmOANmDaL4qMWE8YRIhRKYJuRD8VA74RMySGdioPxsLQxtI9FNNX4@Fvo@BWc19y1aIfzvqckS/9eZVmvajjyclNqXv8wnK2aeLNeyAIxfWr9Ag\" rel=\"nofollow noreferrer\" title=\"PHP – Try It Online\">Try it online!</a></p>\n\n<p>Using PHP 7.1's <a href=\"https://wiki.php.net/rfc/short_list_syntax\" rel=\"nofollow noreferrer\">Square bracket syntax for array destructuring</a> to swap values.</p>\n\n<p><em>Ungolfed:</em></p>\n\n<pre class=\"lang-php prettyprint-override\"><code>foreach( explode( ' ', $argn ) as $w ) {\n  [ $w[0], $w[-1] ] = [ $w[-1], $w[0] ];\n  echo $w, ' ';\n}\n</code></pre>\n"},{"answer_id":185677,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185677#185677","body":"<h1><a href=\"https://docs.python.org/2/\" rel=\"nofollow noreferrer\">Python 2</a>, <s>67</s> <s>66</s> <s>64</s> <s>61</s> 60 bytes</h1>\n\n\n\n<pre class=\"lang-python prettyprint-override\"><code>lambda s:' '.join(w[1:][-1:]+w[1:-1]+w[0]for w in s.split())\n</code></pre>\n\n<p><a href=\"https://tio.run/##FY0xDsMgEAS/sh1Gka04paW8xHFBzCGIyIHgJJTXE9PMTrWTf@ITP7p7vno037c1qJuCWj4p8NT2dTv2@cJt6LyOvR8uFTQERl1qjkEmrXsugQVuUrWZDPEEF0oVGLaI5pJIIlQqkgOZ06OlYsfHFSQW4pOU7n8\" rel=\"nofollow noreferrer\" title=\"Python 2 – Try It Online\">Try it online!</a></p>\n\n<p><sub>-1 byte, thanks to squid</sub></p>\n\n<p><sub>-1 byte, thanks to Erik the Outgolfer</sub></p>\n\n<hr>\n\n<h1><a href=\"https://docs.python.org/3/\" rel=\"nofollow noreferrer\">Python 3</a>, <s>63</s> <s>61</s> <s>58</s> 57 bytes</h1>\n\n\n\n<pre class=\"lang-python prettyprint-override\"><code>print(*[w[1:][-1:]+w[1:-1]+w[0]for w in input().split()])\n</code></pre>\n\n<p><a href=\"https://tio.run/##FYxBCsQgDEWvkmU7Q4cp3fUq4kLaiILEkGSQOb1V@Lz3Vp//liodvbNksuXlmttP77aB98xtn/76WAUaZBrjny3rR7nkYb/2ri0wWEKIWdQg0A0ljChohqJQI2C4ErQq97wIoEiGdOED\" rel=\"nofollow noreferrer\" title=\"Python 3 – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185718,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185718#185718","body":"<h1><a href=\"http://jsoftware.com/\" rel=\"noreferrer\">J</a>, <s>23 </s>17 bytes</h1>\n\n<pre><code>({:,1|.}:)&amp;.&gt;&amp;.;:\n</code></pre>\n\n<p><a href=\"https://tio.run/##TY1BDoIwFET3nmJWVhLS4LZG7/LT/gKm8ElbQ0A5O6ILcTd5My9zX51A@atWJRZTwVTr6WnK80svpjjq21FfzFoc2DYCD5VGGpAbhm9jyqDeIdAWAufMMUE8mGyDUaJTP6vhEOTDwh/MvHmWEqedDVHqSF3X9jWGxzwHTt8PK45RS/D7tO1BqCNzj47JybhXE02IZNlSVOsb\" rel=\"noreferrer\" title=\"J – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185747,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185747#185747","body":"<h1><a href=\"https://github.com/TryItOnline/TioSetup/wiki/Powershell\" rel=\"nofollow noreferrer\">PowerShell</a>, 50 bytes</h1>\n\n\n\n<pre class=\"lang-powershell prettyprint-override\"><code>-split\"$args\"|%{$_-replace'^(.)(.*)(.)$','$3$2$1'}\n</code></pre>\n\n<p><a href=\"https://tio.run/##JY3BCsIwEETP5iuWsJpW2oJ6Ezz0pif/wLIpqRVCE5KGUmq/PabIso/ZWZixZlLO90rriN1tiaW3@jNyJPf2/LtfsCmdsppaJV5ZlWfVMW2OohB4wTOexBpXxvg9BRjozQTkFMwmgHSGF8Br2vgHUQ2ShjTgTbAgpYQpyO030wwulbTkUissbMcfgw0jXAEbYM8wpiPp7IBdcnLO1vgD\" rel=\"nofollow noreferrer\" title=\"PowerShell – Try It Online\">Try it online!</a></p>\n\n<p>Uses regex to replace each word with a captured first and last letter surrounding the original core. If it's a single character, <code>replace</code> will find nothing and leave it alone.</p>\n"},{"answer_id":185745,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185745#185745","body":"<h1><a href=\"http://www.snobol4.org/csnobol4/\" rel=\"nofollow noreferrer\">SNOBOL4 (CSNOBOL4)</a>, 90 bytes</h1>\n\n<pre><code>I&#9;R =\n&#9;INPUT LEN(1) . L REM . M&#9;:F(END)\n&#9;M ARB . M RPOS(1) REM . R\n&#9;OUTPUT =R M L&#9;:(I)\nEND\n</code></pre>\n\n<p><a href=\"https://tio.run/##JYs7CoAwEAXr3VNsmTSCYCWkiBghkI9sImJrLVp4f2KC1YN5M@/9nM81lGKBSSHYsG6ZnAmil9SRIza@rodxESbMEsGT5qkh4jWmpv0KI8Qtt1pxPR2MwkqsTSkas0kZ44L@wD3ynD4\" rel=\"nofollow noreferrer\" title=\"SNOBOL4 (CSNOBOL4) – Try It Online\">Try it online!</a></p>\n\n<p>Takes input separated by newlines; can be either uppercase or lowercase.</p>\n\n<pre><code>I R =&#9;&#9;&#9;&#9;&#9;;* set R to empty string\n  INPUT LEN(1) . L REM . M&#9;:F(END)&#9;;* take first character and set to L, and set the\n&#9;&#9;&#9;&#9;&#9;;* REMainder to M\n  M ARB . M RPOS(1) REM . R&#9;&#9;;* match an ARBitrary (possibly empty) run\n&#9;&#9;&#9;&#9;&#9;;* of characters to M up to but excluding the last character\n&#9;&#9;&#9;&#9;&#9;;* and save the last character to R\n&#9;&#9;&#9;&#9;&#9;;* if M is empty, (i.e., a one-letter word), then this fails&#32;\n&#9;&#9;&#9;&#9;&#9;;* and nothing happens, so M remains empty and R remains empty\n  OUTPUT =R M L&#9;:(I)&#9;&#9;&#9;;* output Right, Middle, Left, then goto I.\nEND\n</code></pre>\n\n<p>(previous version)</p>\n\n<h1><a href=\"http://www.snobol4.org/csnobol4/\" rel=\"nofollow noreferrer\">SNOBOL4 (CSNOBOL4)</a>, 92 bytes</h1>\n\n<pre><code>I&#9;R =M =\n&#9;INPUT LEN(1) . L ('' | ARB . M LEN(1) . R) RPOS(0)&#9;:F(END)\n&#9;OUTPUT =R M L&#9;:(I)\nEND\n</code></pre>\n\n<p><a href=\"https://tio.run/##K87LT8rPMfn/35MzSMHWV8GWi9PTLyA0RMHH1U/DUFNBT8FHQUNdXaFGwTHICcjzRUgEaSoEBfgHaxhoclq5abj6uWhycfqHhoA02waBFHJaaXhqcgEl/v8PcQ0O4XLkCvcPcgEA\" rel=\"nofollow noreferrer\" title=\"SNOBOL4 (CSNOBOL4) – Try It Online\">Try it online!</a></p>\n\n<p>This is thematically the same, clearly, but suffers from using <code>FAILURE</code> as the termination status, preventing us from using <code>FAILURE</code> as a no-op as we do in the above. This then forces us to set <code>M =</code> as well as <code>R =</code>, which is 3 bytes.</p>\n"},{"answer_id":185692,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185692#185692","body":"<h1><a href=\"https://github.com/ETHproductions/japt\" rel=\"nofollow noreferrer\">Japt</a> <a href=\"https://codegolf.meta.stackexchange.com/a/14339/\"><code>-S</code></a>, 10 bytes</h1>\n<p>Convinced there has to be a shorter approach (and <a href=\"https://codegolf.stackexchange.com/a/185743/58974\">I was right</a>) but this'll do for now.</p>\n<pre><code>¸ËhJDg)hDÌ\n</code></pre>\n<p><a href=\"https://petershaggynoble.github.io/Japt-Interpreter/?v=1.4.6&amp;flags=LVM&amp;code=uMtoSkRnKWhEzA&amp;input=ImluIGEgZ3JlZW4gbWVhZG93Ig\" rel=\"nofollow noreferrer\">Try it</a></p>\n<pre><code>¸ËhJDg)hDÌ     :Implicit input of string\n¸              :Split on spaces\n Ë             :Map each D\n  h            :  Set the character at\n   J           :    Index -1 to\n    Dg         :    The first character in D\n      )        :  End set\n       h       :  Set the first character to\n        DÌ     :    The last character in D\n               :Implicit output, joined by spaces\n</code></pre>\n"},{"answer_id":185743,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185743#185743","body":"<h1><a href=\"https://github.com/ETHproductions/japt\" rel=\"nofollow noreferrer\">Japt</a> <a href=\"https://codegolf.meta.stackexchange.com/a/14339/\"><code>-S</code></a>, 7 bytes</h1>\n<pre><code>¸®ÎiZÅé\n</code></pre>\n<p><a href=\"https://petershaggynoble.github.io/Japt-Interpreter/?v=1.4.6&amp;flags=LVM&amp;code=uK7OaVrF6Q&amp;input=InN3YXAgdGhlIGZpcnN0IGFuZCBsYXN0IGxldHRlcnMgb2YgZWFjaCB3b3JkIg\" rel=\"nofollow noreferrer\">Try it</a></p>\n"},{"answer_id":185736,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185736#185736","body":"<h1>T-SQL, 126 bytes</h1>\n<pre class=\"lang-sql prettyprint-override\"><code>SELECT STRING_AGG(STUFF(STUFF(value,1,1,RIGHT(value,1)),LEN(value),1,LEFT(value,1)),' ')\nFROM STRING_SPLIT((SELECT*FROM t),' ')\n</code></pre>\n<p>Input is via a pre-existing table <strong>t</strong> with varchar field <strong>v</strong>, <a href=\"https://codegolf.meta.stackexchange.com/questions/2447/default-for-code-golf-input-output-methods/5341#5341\">per our IO standards</a>.</p>\n<p>Reading from back to front, <code>STRING_SPLIT</code> breaks a string into individual rows via a delimiter, <code>STUFF</code> modifies the characters at the specified positions, then <code>STRING_AGG</code> mashes them back together again.</p>\n"},{"answer_id":185730,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185730#185730","body":"<h2>Haskell, 54 bytes</h2>\n\n<pre><code>unwords.map f.words\nf[a]=[a]\nf(a:b)=last b:init b++[a]\n</code></pre>\n\n<p><a href=\"https://tio.run/##LU5LrsIwDNz3FKOuQDx6AKTegLd6S0DIpE4avfyUpKrg8IS0ZWHZM/aMZ6T0z8YU1V/L5GYfh9RZCpDdOjfyQre@ViN3dHrse0Mp43HSTtd2ONRNsaQdelTV7x27MOW/HM8Ondrj0gBtmqtfHhlSxyomN2B1MZwzxwQvwSRGLA/bn0Ux1kR@weZLZK73ghKnDYfoVSRrtVMI0@tlOK2@wg8M5Y3czmougorMDpZp8PNGP@mJSIIFxfbWlLeQhlQqRxHCBw\" rel=\"noreferrer\" title=\"Haskell – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185729,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185729#185729","body":"<h1>Scala, 100 bytes</h1>\n\n<pre class=\"lang-scala prettyprint-override\"><code>(b:String,c:String)=&gt;b.split(c)map(f=&gt;f.tail.lastOption++:(f.drop(1).dropRight(1)+f.head))mkString c\n</code></pre>\n"},{"answer_id":185719,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185719#185719","body":"<h1><a href=\"https://www.haskell.org/\" rel=\"nofollow noreferrer\">Haskell</a>, <s>75</s> 74 bytes</h1>\n\n<p>Fixed a bug pointed at by Cubic and also golfed down 1 byte.</p>\n\n\n\n<pre class=\"lang-hs prettyprint-override\"><code>f=unwords.map(#v).words\nx#g=g(r$tail x)++[x!!0]\nr=reverse\nv[]=[]\nv x=r$x#r\n</code></pre>\n\n<p><a href=\"https://tio.run/##LY5NboMwEIX3PsULZBGUCvUCvkG7yhKhagSDQTU2Gpuf5PLUhO7mPb359PUUftnafe/07FYvbShHmm75UpTvpLbcaHOTa6TBYivu92q7XD5rJVp4YQmslqrWVa0WbFquWy77SIODRuJ8/@A2zfER5cuhRFegUkAWVpoQe0Y3SIgg18JSOizHmJDwHZiaHodB9nF89MnRH9n@F5HTvqHA4cyTeCM0joMzmObXy3J4cxvfMoy33TlLYgQjzA4jU@vXs37SE0INNySZQr3/AQ\" rel=\"nofollow noreferrer\" title=\"Haskell – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185694,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185694#185694","body":"<h1>Java, <s>110</s> 109 bytes</h1>\n\n<p>-1 bytes by using a newline for a delimeter</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>s-&gt;{int l;for(var i:s.split(\"\\n\"))System.out.println(i.charAt(l=i.length()-1)+i.substring(1,l)+i.charAt(0));}\n</code></pre>\n\n<p><a href=\"https://tio.run/##LY7BDoIwEETvfEXDqY3SyFWiiRfj3aN4qNDi4tqa7oIxhG9HJF7nTd5Ma3qTtfVjAs82OlNZcRySPkAtnDxzBN8IUkVCbBgqsYCnAf9nl6swsSE1JEfhdhNl@2EWCSxciLI3UcCWNL0QWKalT5U6f4jtU4eO9WsWMHoJurqbeGCJO9BofcN3qbJcrUBTd6NlR@Zr/AX/5kapYpyKxGkn05NFDKV/h4h1Ol8dx@kL\" rel=\"nofollow noreferrer\">TIO</a></p>\n"},{"answer_id":185724,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185724#185724","body":"<h1><a href=\"https://www.haskell.org/\" rel=\"noreferrer\">laskelH</a>, 71 bytes</h1>\n\n\n\n<pre class=\"lang-hs prettyprint-override\"><code>h=reverse\ns(x:y:o)=a:h(x:r)where(a:r)=h$y:o\ns o=o\nf=unwords.map s.words\n</code></pre>\n\n<p><a href=\"https://tio.run/##ZVJBbhsxDLzrFTwEaAI0foCBfYCBopfmA8yattjViguRymb7eZeS10DQnkRR5HA4o4g6UUq3WxwKfVBRCvr8edyO8jLgMXpYXtZIhZ7RoyE@@UtQkEHCZah5lXLWw4wL6KHHt9dXOH2bIYvBKDUb5ytYZAVUWLAYyMXvBDwviWbKhsaSQfkPhRk5wwCcjQqOBk9Qc@JMCgdoMy5@9vvt1@rXBnPhogaYz5DQg0TmvY4AhGOERim89elJpV0nhZUt@rx8TfSo79QdeiLAEE4G3vGOyiOmtMHv2kaAWkG@RoO6/Mve562RxxhOcJEH3ChZWbsAbedVwJ9mKY@p94q@RSQ8h12Y3YYzGHICB/@SfIgnha@cMfXGDkPen//vD@GnGHke7f5Yk6upuN1Tq0Nl3zDihxcJaF0WaR5lgolz56TktqE5d3cWcIYxijT5QBccHe2Nxph3qdi@iBzER5amjFGvbX9g9d/2Hd6r9VpOCawWt8tJb/5PHNbtlx078H0ncn9/uPEt8BKFnneT6BObE1AVrw7v2kb/C8m332lT2oLDzTjRHWlvkGqLc0giEzh5Kn8B\" rel=\"noreferrer\" title=\"Haskell – Try It Online\">Try it online!</a></p>\n\n<p>Example in/output:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>Swap the first and last letter in each word\nThis also works with single letter words like a\n\nIt is basically just a straight up implementation in which\nI for words consisting of two or more letters cons the head\nof the reversed tail on the reverse of the original head consed\non the reversed tail\n\nNote that the rules say that we only have to support one kind\nof separator - I am choosing spaces Technically it works with\nother whitespace as well, but it will turn everything into spaces\nin the end Line endings in this example usage are handled separately\nto make the example output look nicer\n</code></pre>\n\n<pre class=\"lang-hs prettyprint-override\"><code>pwaS eht tirsf dna tasl rettel ni hace dorw\nshiT olsa sorkw hitw eingls rettel sordw eikl a\n\ntI si yasicallb tusj a ttraighs pu nmplementatioi ni hhicw\nI rof sordw gonsistinc fo owt ro eorm setterl sonc eht deah\nfo eht deverser lait no eht eeversr fo eht lriginao deah donsec\nno eht deverser lait\n\neotN that eht suler yas that ew ynlo eavh ot tuppors eno dink\nfo reparatos - I ma ghoosinc spaces yechnicallT ti sorkw hitw\nrtheo ehitespacw sa ,ellw tub ti lilw nurt gverythine onti spaces\nni eht dne einL sndinge ni shit example esagu era dandleh yeparatels\not eakm eht example tutpuo kool ricen\n<span class=\"math-container\">```</span>\n</code></pre>\n"},{"answer_id":185722,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185722#185722","body":"<h1><a href=\"https://web.archive.org/web/20150618184706/http://compsoc.dur.ac.uk/whitespace/tutorial.php\" rel=\"nofollow noreferrer\">Whitespace</a>, 179 bytes</h1>\n<pre><code>[N\nS S S N\n_Create_Label_OUTER_LOOP][S S S N\n_Push_n=0][N\nS S T   N\n_Create_Label_INNER_LOOP][S N\nS _Duplicate_n][S N\nS _Duplicate_n][S N\nS _Duplicate_n][T   N\nT   S _Read_STDIN_as_character][T   T   T   _Retrieve_input][S S S T    S T T   N\n_Push_11][T S S T   _Subtract_t=input-11][N\nT   T   S S N\n_If_t&lt;0_jump_to_Label_PRINT][S S S T    N\n_Push_1][T  S S S _Add_n=n+1][N\nS N\nT   N\n_Jump_to_Label_INNER_LOOP][N\nS S S S N\n_Create_Label_PRINT][S S S T    N\n_Push_1][T  S S T   _Subtract_n=n-1][S N\nS _Duplicate_n][S N\nS _Duplicate_n][N\nT   S N\n_If_n==0_jump_to_Label_PRINT_TRAILING][T    T   T   _Retrieve][T    N\nS S _Print_as_character][S S S N\n_Push_s=0][N\nS S S T N\n_Create_Label_PRINT_LOOP][S S S T   N\n_Push_1][T  S S S _Add_s=s+1][S N\nS _Duplicate_s][S T S S T   S N\n_Copy_0-based_2nd_n][T  S S T   _Subtract_i=s-n][N\nT   S N\n_If_0_Jump_to_Label_PRINT_TRAILING][S N\nS _Duplicate_s][T   T   T   _Retrieve][T    N\nS S _Print_as_character][N\nS T S T N\n_Jump_to_Label_PRINT_LOOP][N\nS S N\n_Create_Label_PRINT_TRAILING][S S S N\n_Push_0][T  T   T   _Retrieve][T    N\nS S _Print_as_character][S S S T    S S T   N\n_Push_9_tab][T  N\nS S _Print_as_character][N\nS N\nS N\n_Jump_to_Label_OUTER_LOOP]\n</code></pre>\n<p>Letters <code>S</code> (space), <code>T</code> (tab), and <code>N</code> (new-line) added as highlighting only.<br />\n<code>[..._some_action]</code> added as explanation only.</p>\n<p>Tab as delimiter. Input should contain a trailing newline (or tab), otherwise the program doesn't know when to stop, since taking input in Whitespace can only be done one character at a time.</p>\n<p><a href=\"https://tio.run/##TY7hDoMgDIR/X5@ir9ZonWREDTDNnp61lsQlQK/0u4NrTU3rIZP2Tsx8bztALu8FAgOwgVdr/AaB3q0pgpv@7hBek8aai3kEMx6fM8FGqBt44OSvEY0fPRlBRjhT7/WSA21VLKnUBtlmZDGRtTUtFfsClWnFtZcZaZvyZ07bC4JqJevgYpzTW22yFyRUOc8v/QA\" rel=\"nofollow noreferrer\">Try it online</a> (with raw spaces, tabs, and new-lines only).</p>\n<p><strong>Explanation in pseudo-code:</strong></p>\n<p>Whitespace only has a stack and a heap, where the heap is a map with a key and value (both integers). Inputs can only be read one integer or character at a time, which are always placed in the heap as integers, and can then be received and pushed to the stack with their defined heap-addresses (map-keys). In my approach I store the entire word at the heap-addresses (map-keys) <span class=\"math-container\">\\$[0, ..., \\text{word_length}]\\$</span>, and then retrieve the characters to print one by one in the order we'd want after a tab (or newline) is encountered as delimiter.</p>\n<pre><code>Start OUTER_LOOP:\n  Integer n = 0\n  Start INNER_LOOP:\n    Character c = STDIN as character, saved at heap-address n\n    If(c == '\\t' OR c == '\\n'):\n      Jump to PRINT\n    n = n + 1\n    Go to next iteration of INNER_LOOP\n\n  PRINT:\n    n = n - 1\n    If(n == 0): (this means it was a single-letter word)\n      Jump to PRINT_TRAILING\n    Character c = get character from heap-address n\n    Print c as character\n    Integer s = 0\n\n    Start PRINT_LOOP:\n      s = s + 1\n      If(s - n == 0):\n        Jump to PRINT_TRAILING\n      Character c = get character from heap-address s\n      Print c as character\n      Go to next iteration of PRINT_LOOP\n\n    PRINT_TRAILING:\n      Character c = get character from heap-address 0\n      Print c as character\n      Print '\\t'\n      Go to next iteration of OUTER_LOOP\n</code></pre>\n<p>The program terminates with an error when it tries to read a character when none is given in TIO (or it hangs waiting for an input in some Whitespace compilers like <a href=\"http://vii5ard.github.io/whitespace/\" rel=\"nofollow noreferrer\">vii5ard</a>).</p>\n"},{"answer_id":185713,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185713#185713","body":"<h1>APL+WIN, 50 bytes</h1>\n<pre><code>(∊¯1↑¨s),¨1↓¨(¯1↓¨s),¨↑¨s←((+\\s=' ')⊂s←' ',⎕)~¨' '\n</code></pre>\n<p>Prompts for string and uses space as the delimiter.</p>\n<p><a href=\"https://tio.run/##SyzI0U2pTMzJT9dNzkksLs5M/v@ob6qvz6O2CcZcjzra0/5rPOroOrTe8FHbxEMrijV1Dq0AMicfWqEBFpsMFYPIAjVpaGjHFNuqK6hrPupqAgkAmTpAEzXrDq0AMv8DjfyfxqVeXJ5YoFCSkaqQlllUXKKQmJeiALS9RCEntaQktahYIT9NITUxOUOhPL8oRR0A\" rel=\"nofollow noreferrer\" title=\"APL (Dyalog Classic) – Try It Online\">Try it online! Courtesy of Dyalog Classic</a></p>\n"},{"answer_id":185711,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185711#185711","body":"<h1><a href=\"https://github.com/gtownsend/icon\" rel=\"nofollow noreferrer\">Icon</a>, 76 bytes</h1>\n\n<pre><code>link segment\nprocedure f(s)\nw:=!seglist(s,' ')&amp;w[1]:=:w[-1]&amp;writes(w)&amp;\\x\nend\n</code></pre>\n\n<p><a href=\"https://tio.run/##bY/NjsIwDITvfQrDoSTScuBaxJMABytx02jzU9lBAV6@G7iA1PXJ0jczHnuT07IEn35ByEVKpZs5G7I3JhiV6K4Op01DwUtR8rODne7r@XAdTkM97w/XvrIvJKrq/nLvKNnl44/ok9IdtBnVVirOUKYW61kKYLIQsC2BSiEWyCMQmglqZrvVx3fuxz1RCPnFwj@wFShgUEjWrNVxjDH65GC@PZ@B5H3bZEvgchjXFp8AwTFRgkhoc11LHvgARkMG@Qu@3v8D\" rel=\"nofollow noreferrer\" title=\"Icon – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185709,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185709#185709","body":"<h1><a href=\"http://www.mono-project.com/docs/about-mono/releases/5.0.0/#csc\" rel=\"nofollow noreferrer\">C# (Visual C# Interactive Compiler)</a>, 90 bytes</h1>\n\n\n\n<pre class=\"lang-cs prettyprint-override\"><code>n=&gt;n.Split().Any(x=&gt;WriteLine(x.Length&lt;2?x:x.Last()+x.Substring(1,x.Length-2)+x[0])is int)\n</code></pre>\n\n<p>Uses newline as delimiter, though really any whitespace can be used.</p>\n\n<p><a href=\"https://tio.run/##nZAxb4MwEIX3@xUWk1EDSjM2gbRLpmwZOlQdHHMGS@aMfEZA/jx1VVXdOnDb3b33Pd1pLjTb9TKSPnEMltrd3XtXm2qlqqbyNjgbZV6@0SLnqn4PNuLVEsq5vCK1sTsdzvNLahQn2dNc3sb7D0c@7341xSFtPvafuWVhKebrEYzMeFKDiB0KYwNHoagRLlGEwxgxsPBGoNKdmHxosvwIf9lZ8X99q418zTp0zkPyu42AiBxBK0be5h@Cb4Pq@/QOGMbHwyFDuhO0bxBa78w2rCVQ0AZEgh5V46dtmEUtEJRGrUIarV8\" rel=\"nofollow noreferrer\" title=\"C# (Visual C# Interactive Compiler) – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185701,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185701#185701","body":"<h2>Batch, 141 bytes</h2>\n\n<pre><code>@set t=\n@for %%w in (%*)do @call:c %%w\n@echo%t%\n@exit/b\n:c\n@set s=%1\n@if not %s%==%s:~,1% set s=%s:~-1%%s:~1,-1%%s:~,1%\n@set t=%t% %s%\n</code></pre>\n\n<p>Takes input as command-line parameters. String manipulation is dire in Batch at best, and having to special-case single-letter words doesn't help.</p>\n"},{"answer_id":185678,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185678#185678","body":"<h1><a href=\"https://github.com/tomtheisen/stax\" rel=\"nofollow noreferrer\">Stax</a>, 8 <a href=\"https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax\" rel=\"nofollow noreferrer\">bytes</a></h1>\n\n<pre><code>Σq╞♪áZN¢\n</code></pre>\n\n<p><a href=\"https://staxlang.xyz/#p=e471c60da05a4e9b&amp;i=swap%0Athe%0Afirst%0Aand%0Alast%0Aletters%0Aof%0Aeach%0Aword%0A%0Ahello%0Aworld%0A%0Atest%0Acases%0A%0Aprogramming%0Apuzzles%0Aand%0Acode%0Agolf%0A%0Ain%0Aa%0Agreen%0Ameadow%0A%0Ayay%0Aracecar%0A&amp;a=1&amp;m=1\" rel=\"nofollow noreferrer\">Run and debug it</a></p>\n\n<p>Uses newlines as word separators.</p>\n"},{"answer_id":185675,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185675#185675","body":"<h1><a href=\"https://github.com/Adriandmen/05AB1E\" rel=\"nofollow noreferrer\">05AB1E</a>, 10 bytes</h1>\n\n<pre><code>#vyRćsRćðJ\n</code></pre>\n\n<p><a href=\"https://tio.run/##LYrBCYAwEARbWbAbn3ZwmlMPj0RyMWIFtmMP2lcM6GOZgdlg1AuX0uSje06ru6@2FNtpRZoZo0RLIO@gVEU5JY6GMIJpmLGH6CB@0M2Jn0CwCuX/92WVhWsJEQKjnI8X\" rel=\"nofollow noreferrer\" title=\"05AB1E – Try It Online\">Try it online!</a></p>\n\n<hr>\n\n<p>-3 Thanks to <a href=\"https://codegolf.stackexchange.com/users/52210/kevin-cruijssen\">@Kevin Cruijssen</a>.</p>\n\n<pre><code>#           | Split into words.\n vy         | For each word...\n   RćsRć    | Reverse, split head, swap, reverse, split tail\n        ðJ  | Join by spaces.\n</code></pre>\n"},{"answer_id":185679,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185679#185679","body":"<h1><a href=\"https://www.ruby-lang.org/\" rel=\"nofollow noreferrer\">Ruby</a> with <code>-p</code>, <s>42</s> <s>41</s> 29 bytes</h1>\n\n\n\n<pre class=\"lang-ruby prettyprint-override\"><code>gsub /(\\w)(\\w*)(\\w)/,'\\3\\2\\1'\n</code></pre>\n\n<p><a href=\"https://tio.run/##HYxBDoMwDATveYVvlKoVavudXExiQqQQR3YQgsc3hR5mNYfVyDrurQVdRxhudutP7tf0w6OzH/u2r6413bBAnQmmKFoBs4eEpySqlUSBJyB0M2ws3syUEl@avKl0vhwqqSnCQXBZYg5Q1uNIpP@QY08QOE0mZkAIQpRhIfS8mR13EHTkUL5cauSs7Vl@\" rel=\"nofollow noreferrer\" title=\"Ruby – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185683,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185683#185683","body":"<h1><a href=\"https://github.com/m-ender/retina/wiki/The-Language\" rel=\"noreferrer\">Retina</a>, <del>8</del> 5 bytes</h1>\n\n<pre><code>,V,,`\n</code></pre>\n\n<p><a href=\"https://tio.run/##DcZBCsAgDATA@74ll36m54a6oiAqScDnp53TGKNPvTLlFnky/ehGNKJ284DOgqF/BiNojlVBfRvOsvIB\" rel=\"noreferrer\" title=\"Retina – Try It Online\">Try it online!</a></p>\n\n<p>Saved 3 bytes thanks to <a href=\"https://codegolf.stackexchange.com/users/52210/kevin-cruijssen\">Kevin Cruijssen</a>!</p>\n\n<p>Uses a newline as the separator. We make use of Retina's reverse stage and some limits. The first limit is which matches to apply the reversal to, so we pick all of them with <code>,</code>. Then we want the first and last letter of each match to be swapped, so we take each letter in the range <code>,,</code> which translates to a range from the beginning to the end with step size zero.</p>\n"},{"answer_id":185680,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185680#185680","body":"<h1>JavaScript (ES6), <s> 39 </s> 36 bytes</h1>\n<p><em>Saved 3 bytes thanks to @FryAmTheEggman</em></p>\n<p>Uses a linefeed as separator.</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>s=&gt;s.replace(/(.)(.*)(.)/g,'$3$2$1')\n</code></pre>\n<p><a href=\"https://tio.run/##TVDRasQgEHy@@4olHERLm9D2OfclfVnMxuQwKq5tuPv5dA3JcYKgszPjjDf8QzZpivnDh57WoVu5u3KTKDo0pFrVaNW8ydatfa8v35evy2et10ycoQOG7gomeA6OGhesGhQ3HN2UVQ21bm5h8qr@8bXWB1wuOy4MfT4XK1XxghHySDBMSazR9@BQDo5ypsQQBiA0Iywh9ZU@tS1UcUEGGjNkkQzQe4SM7IA3iYMhwCgdoA9pqfZnRnIuFBMnLnAqq1gFgcdCdE/m1tAgE78SN5QFNQcvpmATzvPkLcTfx8MRb@mNfCfY4IZNXrT2yYzAGzNuoSn0RsI6e1hOHhBsIvIwE/ZhkcKwB/CTzLzMLCxlNh@iO94hSV2DSehH3ld0/Qc\" rel=\"noreferrer\" title=\"JavaScript (Node.js) – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185687,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185687#185687","body":"<h1><a href=\"https://www.perl.org/\" rel=\"nofollow noreferrer\">Perl 5</a> <code>-p</code>, 24 bytes</h1>\n\n\n\n<pre class=\"lang-perl prettyprint-override\"><code>s/(\\w)(\\w*)(\\w)/$3$2$1/g\n</code></pre>\n\n<p><a href=\"https://tio.run/##K0gtyjH9/79YXyOmXBOItUCEpr6KsYqRiqF@@v//Gak5OfkK5flFOSn/8gtKMvPziv/r@prqGRgZ/dctAAA\" rel=\"nofollow noreferrer\" title=\"Perl 5 – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185676,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185676#185676","body":"<h1><a href=\"https://docs.python.org/3/\" rel=\"noreferrer\">Python 3</a>, <s>72</s> 58 bytes</h1>\n\n\n\n<pre class=\"lang-python prettyprint-override\"><code>print(*[x[-1]+x[1:-1]+x[:x&gt;x[0]]for x in input().split()])\n</code></pre>\n\n<p><a href=\"https://tio.run/##JcZBCsMgEEbhq/zLpKWhobssehFxIYmiIDqMEzI5vRUKD75Ht8RaPr0TpyLTw6h5rfapZt3@bvpV87Y2VIYilRGdMs1Lo5yGdu69XY4g0SMkbgJXDmQ3JnsRzw01wLs94qp8/AA\" rel=\"noreferrer\" title=\"Python 3 – Try It Online\">Try it online!</a></p>\n"},{"answer_id":185681,"question_id":185674,"link":"https://codegolf.stackexchange.com/questions/185674/pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw/185681#185681","body":"<h1><a href=\"https://github.com/abrudz/QuadRS\" rel=\"nofollow noreferrer\">QuadR</a>, 20 bytes</h1>\n\n\n\n<pre class=\"lang-apl prettyprint-override\"><code>(\\w)(\\w*)(\\w)\n\\3\\2\\1\n</code></pre>\n\n<p>Simply make three capturing groups consisting of 1, 0-or-more, and 1 word-characters, then reverses their order.</p>\n\n<p><a href=\"https://tio.run/##TY/BbsMgEETv@YqRT0mlHpre@yW@rGABS2ugLBFKft5d21XVA4idmQfD94N827brPG623vbtdpk/5/v8sW2TDqroiRGWph2UPYTsINw7N0UJYHIJozQ/4f0LUx2k4NTRjQjwmdBJBXoQglCQyDF8aWO6TIlFyo7LL19MSLsru93ZHnOkrKd7zGqzM7O2Ehut65Ij6uP1EtajoSueEYuEk4l/sQo9YvWoxcU7qyPRrloyCLExZ6xMvowTzYvJ2eSIscurRZ/0RLMfOGpn6L/wAw\" rel=\"nofollow noreferrer\" title=\"QuadR – Try It Online\">Try it online!</a></p>\n"},{"answer_id":184823,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/184823#184823","body":"<h1>TI-BASIC, 16 chars (8 bytes)</h1>\n\n<pre><code>Ans(1) nCr Ans(2\n</code></pre>\n\n<p>Input is a list of length 2 in <code>Ans</code>.<br>\nOutput is the result of the formula defined <a href=\"http://tibasicdev.wikidot.com/ncr\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>If the above solution doesn't suffice, then the following <strong>35 chars (24 bytes)</strong> solution also works:</p>\n\n<pre><code>Ans(2)!⁻¹(Ans(1)-Ans(2))!⁻¹Ans(1)!\n</code></pre>\n\n<hr>\n\n<p><strong>Note:</strong> TI-BASIC is a tokenized language.  Character count does <strong><em>not</em></strong> equal byte count.</p>\n"},{"answer_id":184820,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/184820#184820","body":"<h1>Javascript, 27 bytes</h1>\n\n<p>First my own 35-byte solutions:</p>\n\n<pre><code>f=(n,k)=&gt;n-k&amp;&amp;k?f(--n,k)+f(n,k-1):1\n</code></pre>\n\n<p>Or, alternatively,</p>\n\n<pre><code>f=(n,k,i=k)=&gt;i?f(n-1,k-1,i-1)*n/k:1\n</code></pre>\n\n<p>The first working recursively, with the simple <code>(n,k) = (n-1,k) + (n-1,k-1)</code> rule. The second using that <code>(n,k) = (n-1,k-1) * n/k</code>. </p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I just noticed the solution by Arnould in a duplicate of this:</p>\n\n<pre><code>f=(n,k)=&gt;k?n*f(n-1,k-1)/k:1\n</code></pre>\n\n<p>Which is a whopping 8 bytes less (27 bytes)</p>\n"},{"answer_id":177009,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/177009#177009","body":"<h1><a href=\"https://github.com/nxadm/rakudo-pkg\" rel=\"nofollow noreferrer\">Perl 6</a>, <s>25</s> 16 bytes</h1>\n\n<p><em>-9 bytes thanks to nwellnhof</em></p>\n\n\n\n<pre class=\"lang-perl6 prettyprint-override\"><code>+*o&amp;combinations\n</code></pre>\n\n<p><a href=\"https://tio.run/##K0gtyjH7n1upoJamYKvwX1srXy05PzcpMy@xJDM/r/i/NVdxYqVCmoapjpEmjG1ogMwx1TE00LT@DwA\" rel=\"nofollow noreferrer\" title=\"Perl 6 – Try It Online\">Try it online!</a></p>\n\n<p>Anonymous function that takes two numbers and returns an int. This uses the built-in <code>combinations</code> and converts the returned list to an int.</p>\n"},{"answer_id":177007,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/177007#177007","body":"<h1><a href=\"http://tcl.tk/\" rel=\"nofollow noreferrer\">Tcl</a>, 80 bytes</h1>\n\n<pre><code>proc C n\\ k {proc f n {expr $n?($n)*\\[f $n-1]:1}\nexpr [f $n]/([f $k]*[f $n-$k])}\n</code></pre>\n\n<p><a href=\"https://tio.run/##K0nO@f@/oCg/WcFZIS9GIVuhGsxJU8hTqE6tKChSUMmz11DJ09SKiU4DsnUNY60Ma7nAMmCBWH0NEJ0dqwWRB7I0a//n5CYWQI3jMlUw4qoF0gpAUFBaUqwQ7QxUCNLCVfsfAA\" rel=\"nofollow noreferrer\" title=\"Tcl – Try It Online\">Try it online!</a></p>\n"},{"answer_id":1746,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/1746#1746","body":"<h1>APL, 3 bytes</h1>\n\n<pre><code>⎕!⎕\n</code></pre>\n\n<p>Or for those whose browser doesn't render the above, in an ASCII rendering:</p>\n\n<pre><code>{Quad}!{Quad}\n</code></pre>\n"},{"answer_id":9154,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/9154#9154","body":"<p><em>(The OP only loosely specified the input &amp; output method/format, so the following seems acceptable.)</em></p>\n\n<h2>Sage Notebook (<s>39 41</s> 40)</h2>\n\n<p>In the current cell,</p>\n\n<pre><code>f=lambda n,k:k&lt;1or f(n-1,k-1)*n/k;+f(*_)\n</code></pre>\n\n<p>where the input in the form <code>n,k</code> is entered &amp; evaluated in the preceding cell. This simulates \"command-line input\" by assigning it to <code>_</code> (similar to command-line arguments).</p>\n\n<h2>Sage Notebook (<s>42 44</s> 43)</h2>\n\n<p>Alternatively, using \"in-source input\" (with only the <code>x=</code> and newline characters adding to the score), e.g.,</p>\n\n<pre><code>x=5,2\nf=lambda n,k:k&lt;1or f(n-1,k-1)*n/k;+f(*x)\n</code></pre>\n\n<p><em>Both of these approaches are obviously spin-offs from earlier answers by others.</em></p>\n"},{"answer_id":9142,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/9142#9142","body":"<h1>Python (52)</h1>\n<pre><code> f=lambda n,k:k&lt;1or f(n-1,k-1)*n/k;print+f(*input())\n</code></pre>\n<p>Improved from the other two by using <code>print+</code> to convert the result of <code>f</code> from <code>boolean</code> to <code>int</code> in case <code>k==0</code>.</p>\n<p>Still have no idea how to shrink it to 39, I wonder whether they are using lambda at all.</p>\n"},{"answer_id":9150,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/9150#9150","body":"<h1>Mathematica 12</h1>\n<p>Straightforward, built-in function.</p>\n<pre><code>n~Binomial~k\n</code></pre>\n"},{"answer_id":6279,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/6279#6279","body":"<h3>Scala 54</h3>\n<pre><code>val n,k=readInt\n((k+1)to n product)/(1 to(n-k)product)\n</code></pre>\n"},{"answer_id":6288,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/6288#6288","body":"<h2>J, 11 characters</h2>\n\n<pre><code>!~/\".1!:1[1\n</code></pre>\n\n<p>Takes input from the keyboard.</p>\n\n<pre><code>    !~/\".1!:1[1\n5,2\n10\n</code></pre>\n"},{"answer_id":6280,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/6280#6280","body":"<h2>C 96</h2>\n\n<p>With I/O (which takes about 34 chars). Added a couple of newlines to make it readable.</p>\n\n<pre><code>main(a,b,c,d){scanf(\"%d,%d\",&amp;a,&amp;b);\nd=a-b;for(c=1;a&gt;b;){c*=a--;}for(;d;)\n{c/=d--;}printf(\"%d\",c);}\n</code></pre>\n\n<p>Now if you'll excuse me, I have an ASCII n choose k rocket to catch.</p>\n\n<pre><code>    d;main(a\n   ,         b\n  ,           c\n )  int        a\n ;   {scanf    (\n (   \"%d %d\"   )\n ,   &amp;a,  &amp;b   )\n ;   d    =a   -\n b   +     b   -\n b   *     1   ;\n a             -\n a  ;for    (  c\n =  1;a&gt;   b   ;\n )  {c=   c    *\n (  (a-- )     )\n ;  }for(      b\n =  b + 1      ;\n d  ;    )     {\n c  =     c    /\n (  d--    )   ;\n  }           {\n  }           {\n   }         (\n  printf(\"%d\",c)\n )      ;       }\n/*     *  *   * *\\\n * * X   * 8 * * |\n|     *      *    \\\n*/    //       *  */\n</code></pre>\n"},{"answer_id":6276,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/6276#6276","body":"<h1>Python (54)</h1>\n<pre><code>f=lambda n,k:k&lt;1or f(n-1,k-1)*n/k;print 1*f(*input())\n</code></pre>\n<p>Essentially the same as the Python one above, but I shave off four bytes by dropping the</p>\n<pre><code>and 1\n</code></pre>\n<p>from the function definition. However, this results in the function returning True instead of 1 if k=0, but this can be fixed by multiplying with 1 before printing, since 1*True=1, thus adding two bytes.</p>\n"},{"answer_id":5076,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/5076#5076","body":"<h1>Q, 32 chars</h1>\n\n<pre><code>{f:{1*/1.+(!)x};f[x]%f[y]*f x-y}\n</code></pre>\n"},{"answer_id":5089,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/5089#5089","body":"<h2>Haskell (80)</h2>\n\n<pre><code>f(_,0)=1\nf(n,k)=n/k*f(n-1,k-1)\nmain=getLine&gt;&gt;=putStr.show.f.read.(++\")\").('(':)\n</code></pre>\n\n<p>But, if input in the format <code>x y</code> is allowed instead of in the format <code>x,y</code>, it's 74 chars:</p>\n\n<pre><code>f[_,0]=1\nf[n,k]=n/k*f[n-1,k-1]\nmain=interact$show.f.map read.take 2.words\n</code></pre>\n"},{"answer_id":5052,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/5052#5052","body":"<h1>R (11 Chars)</h1>\n\n<pre><code>choose(n,r)\n</code></pre>\n"},{"answer_id":5049,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/5049#5049","body":"<h2>Q (<strike>50</strike> 45)</h2>\n\n<pre><code> f:{(prd 1.+til x)%((prd 1.+til y)*prd 1.+til x-y)}\n</code></pre>\n\n<p>You can shave a few characters off the above by removing redundant brackets and using 1*/ instead of prd.</p>\n\n<pre><code>f:{(1*/1.+til x)%(1*/1.+til y)*1*/1.+til x-y}\n</code></pre>\n"},{"answer_id":1884,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/1884#1884","body":"<h2>RPL (4)</h2>\n\n<p>(using built-in function)</p>\n\n<pre><code>COMB\n</code></pre>\n"},{"answer_id":1885,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/1885#1885","body":"<h2>RPL (22)</h2>\n\n<p>(not using built-in COMB function)</p>\n\n<pre><code>→ n k 'n!/(k!*(n-k)!)'\n</code></pre>\n"},{"answer_id":1757,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/1757#1757","body":"<h2>Python (56)</h2>\n\n<pre><code>f=lambda n,k:k&lt;1and 1or f(n-1,k-1)*n/k;print f(*input())\n</code></pre>\n\n<p>Ungolfed code and some explanation of a shortcut for calculating the binomial coefficient.  (Note: There is some insight that I just haven't figured out in order to get down to the 39 char version; I don't think this approach will get you there.)</p>\n\n<pre><code># Since choose(n,k) =\n#\n#     n!/((n-k)!k!)\n#\n#          [n(n-1)...(n-k+1)][(n-k)...(1)]\n#        = -------------------------------\n#            [(n-k)...(1)][k(k-1)...(1)]\n#\n# We can cancel the terms:\n#\n#     [(n-k)...(1)]\n#\n# as they appear both on top and bottom, leaving:\n#\n#    n (n-1)     (n-k+1)\n#    - ----- ... -------\n#    k (k-1)       (1)\n#\n# which we might write as:\n#\n#      choose(n,k) = 1,                      if k = 0\n#                  = (n/k)*choose(n-1, k-1), otherwise\n#\ndef choose(n,k):\n    if k &lt; 1:\n        return 1\n    else:\n        return choose(n-1, k-1) * n/k\n\n# input() evaluates the string it reads from stdin, so \"5,2\" becomes\n# (5,2) with no further action required on our part.\n#\n# In the golfed version, we make use of the `*` unpacking operator, \n# to unpack the tuple returned by input() directly into the arguments\n# of f(), without the need for intermediate variables n, k at all.\n#\nn, k = input()\n\n# This line is left as an exercise to the reader.\nprint choose(n, k)\n</code></pre>\n"},{"answer_id":1751,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/1751#1751","body":"<h2>Ruby 1.9, <del>52 </del> 46 (42) characters</h2>\n\n<pre><code>eval\"A,B=\"+gets;i=0;p eval\"(A-B+i+=1)/i*\"*B+?1\n</code></pre>\n\n<p>If stderr is ignored:</p>\n\n<pre><code>eval\"A,B=I=\"+gets;p eval\"I/(A-I-=1)*\"*B+?1\n</code></pre>\n\n<p>Ruby 1.8, 43 characters, no additional output to stderr:</p>\n\n<pre><code>eval\"a,b=i=\"+gets;p eval\"i/(a-i-=1)*\"*b+\"1\"\n</code></pre>\n\n<p>Edits:</p>\n\n<ul>\n<li>(52 -> 48) Found a shorter way to parse the input</li>\n<li>(48 -> 46) Less looping, more eval.</li>\n</ul>\n"},{"answer_id":1759,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/1759#1759","body":"<h2>GolfScript, 17 chars</h2>\n\n<p>This solution handles cases like k=0 or k=1 correctly.</p>\n\n<pre><code>~&gt;.,,]{1\\{)*}/}//\n</code></pre>\n\n<p>Factorial-like portion is based off <a href=\"https://codegolf.stackexchange.com/questions/607/find-the-factorial/629#629\">a previous answer</a>.</p>\n"},{"answer_id":1756,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/1756#1756","body":"<h2>PHP (71 <strike>79</strike>)</h2>\n\n<pre><code>&lt;?$a=fgetcsv(STDIN);$x=1;while($a[1]-$i)$x=$x*($a[0]-++$i+1)/$i;echo$x;\n</code></pre>\n\n<p><strike></p>\n\n<pre><code>&lt;?php $a=fgetcsv(STDIN);$x=1;while(++$i&lt;=$a[1])$x=$x*($a[0]-$i+1)/$i;echo $x?&gt;\n</code></pre>\n\n<p></strike></p>\n"},{"answer_id":1755,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/1755#1755","body":"<h2>Perl 6 (55)</h2>\n\n<pre><code>my ($a,$b)=lines;$_=1;for 1..$a-$b {$_+=$_*$b/$^a};.say\n</code></pre>\n"},{"answer_id":1754,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/1754#1754","body":"<h1>GolfScript 21</h1>\n<pre><code>~~)&gt;.,,]{{)}%{*}*}%~/\n</code></pre>\n<p>Not particularly short, GolfScript lacks a real factorial function, however this has got to be the most wicked data manipulation that I have ever done, this calls for a stack trace:</p>\n<p>&quot;5,2&quot; Data on the stack from input.<br />\n<code>~</code> Eval command, note that , is an operator that turns a number into an array.<br />\n[0 1 2 3 4] 2<br />\n<code>~</code> Binary not.<br />\n[0 1 2 3 4] -3<br />\n<code>)</code> Increment.<br />\n[0 1 2 3 4] -2<br />\n<code>&gt;</code> Take end of array, -2 as parameter to get the last 2 elements.<br />\n[3 4]<br />\n<code>.</code> Duplicate element.<br />\n[3 4] [3 4]<br />\n<code>,</code> Array length.<br />\n[3 4] 2<br />\n<code>,</code> Turn number to array.<br />\n[3 4] [0 1]<br />\n<code>]</code> Create array.<br />\n[[3 4] [0 1]]<br />\n<code>{{)}%{*}*}</code> Block of code.<br />\n[[3 4] [0 1]] {{)}%{*}*}<br />\n<code>%</code> Execute block once for each element of the array. The following part only demonstrate the first loop.<br />\n[3 4]<br />\n<code>{)}%</code> Increment each array element.<br />\n[4 5]<br />\n<code>{*}</code> Block containing a multiply command.<br />\n[4 5] {*}<br />\n<code>*</code> &quot;Fold&quot; the array using the block command, that is in this case make the product of all elements.<br />\n20<br />\nAfter the big loop has finished it returns an array with the results.<br />\n[20 2]<br />\n<code>~</code> Deconstruct the array.<br />\n20 2<br />\n<code>/</code> Division.<br />\n10</p>\n"},{"answer_id":1753,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/1753#1753","body":"<h1>J, <strike>33</strike> 36</h1>\n\n<pre><code>(\":!~/\".;._1}:toJ',',1!:1(3))1!:2(4)\n</code></pre>\n\n<p>35 characters are input, parsing and output. The other character, <code>!</code>, is n choose k.</p>\n\n<p>I don't have Windows around for testing this at the moment, but I believe it should work there.</p>\n"},{"answer_id":1752,"question_id":1744,"link":"https://codegolf.stackexchange.com/questions/1744/mathematical-combination/1752#1752","body":"<h2>Windows PowerShell, 57</h2>\n<pre><code>$a,$b=iex $input\n$p=1\nfor($a-=$b;$a-ge1){$p*=1+$b/$a--}$p\n</code></pre>\n"}]